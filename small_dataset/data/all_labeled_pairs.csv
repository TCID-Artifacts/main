Description,Test,Project_name,File,Label
"CSSStyleDeclaration
setting ex units to a padding or margin works
","
    var style = new CSSStyleDeclaration();
    style.padding = '1ex';
    expect(style.cssText).toEqual('padding: 1ex;');
    style.margin = '1em';
    style.marginTop = '0.5ex';
    expect(style.marginTop).toEqual('0.5ex');
  
",osbornroxas02/jest-another-RPG,https://github.com/osbornroxas02/jest-another-RPG/blob/master/node_modules/cssstyle/lib/CSSStyleDeclaration.test.js,1
"(key, value)
passes negated when the actual does not match the expected
","
      expect(wrapper.find(User).first()).to.not.have.prop('index', 2)
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/prop.test.js,-
"and memoization can be disabled
when not memoized, host resolves to a second value on the seecond call
","
        request(app)
          .get('/proxy/' + firstPort)
          .expect(204)
          .end(function(err) {
            if (err) {
              return done(err);
            }
            request(app)
                .get('/proxy/' + secondPort)
                .expect(200, done);
          });
      
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/express-http-proxy/test/host.js,1
"(value)
passes negated when the actual does not match the expected
","
      expect(wrapper.find('input')).to.not.have.value('other')
      expect(wrapper.find('textarea')).to.not.have.value('other')
      expect(wrapper.find('select')).to.not.have.value('other')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/value.test.js,-
"CSSStyleDeclaration
top, left, right, bottom properties
","
    var style = new CSSStyleDeclaration();
    style.top = 0;
    style.left = '0%';
    style.right = '5em';
    style.bottom = '12pt';
    expect(style.top).toEqual('0px');
    expect(style.left).toEqual('0%');
    expect(style.right).toEqual('5em');
    expect(style.bottom).toEqual('12pt');
    expect(style.length).toEqual(4);
    expect(style.cssText).toEqual('top: 0px; left: 0%; right: 5em; bottom: 12pt;');
  
",grahamfalconer/jest-setup-refresher,https://github.com/grahamfalconer/jest-setup-refresher/blob/master/node_modules/cssstyle/lib/CSSStyleDeclaration.test.js,-
"onLinksUpdated function
should pass when source default and target diamond ports are opposite ports
","
      jest.useFakeTimers();
      const { component } = setup(false, false);
      const { showWarning, updateLoading, triggerParse } = component.props();
      const instance = component.dive().instance();
      const sourcePort = new DefaultDataPortModel(true, '');
      const targetPort = new DiamondPortModel('top', false, '');
      instance.onLinksUpdated({
        link: { sourcePort, targetPort }
      });
      expect(showWarning).not.toHaveBeenCalled();
      expect(updateLoading).toHaveBeenCalledWith(true);
      expect(setTimeout).toHaveBeenCalledWith(
        expect.any(Function),
        expect.any(Number)
      );
      setTimeout.mock.calls[0][0]();
      expect(triggerParse).toHaveBeenCalledWith(expect.any(Object));
    
",Sean2108/LATTE,https://github.com/Sean2108/LATTE/blob/master/test/components/BuildDiagram.spec.js,1
"(name, value)
chains
","
    expect(wrapper).to.have.style('border').equal('1px')
    expect(wrapper.find('span')).to.have.style('color').equal('red')
  
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/style.test.js,0
"secretWord is null
renders spinner when secretWord is null
","
    wrapper = setup(null);
  

    const spinnerComponent = findByTestAttr(wrapper, 'spinner');
    expect(spinnerComponent.exists()).toBe(true);
  
",lmackenzie94/react-testing-udemy,https://github.com/lmackenzie94/react-testing-udemy/blob/master/jotto/src/App.test.js,1
"onLinksUpdated function
should pass when source diamond and target default ports are opposite ports
","
      jest.useFakeTimers();
      const { component } = setup(false, false);
      const { showWarning, updateLoading, triggerParse } = component.props();
      const instance = component.dive().instance();
      const sourcePort = new DiamondPortModel('top', true, '');
      const targetPort = new DefaultDataPortModel(false, '');
      instance.onLinksUpdated({
        link: { sourcePort, targetPort }
      });
      expect(showWarning).not.toHaveBeenCalled();
      expect(updateLoading).toHaveBeenCalledWith(true);
      expect(setTimeout).toHaveBeenCalledWith(
        expect.any(Function),
        expect.any(Number)
      );
      setTimeout.mock.calls[0][0]();
      expect(triggerParse).toHaveBeenCalledWith(expect.any(Object));
    
",Sean2108/LATTE,https://github.com/Sean2108/LATTE/blob/master/test/components/BuildDiagram.spec.js,1
"secretWord is not null
does not render spinner when secretWord is not null
","
    wrapper = setup('party');
  

    const spinnerComponent = findByTestAttr(wrapper, 'spinner');
    expect(spinnerComponent.exists()).toBe(false);
  
",lmackenzie94/react-testing-udemy,https://github.com/lmackenzie94/react-testing-udemy/blob/master/jotto/src/App.test.js,1
"escapeJavaScript()
encodes large unicode characters with the correct padding
","

        var encoded = Hoek.escapeJavaScript(String.fromCharCode(500) + String.fromCharCode(1000));
        expect(encoded).to.equal('\\u0500\\u1000');
        done();
    
",yashnerella/reactJs-basicsJest,https://github.com/yashnerella/reactJs-basicsJest/blob/master/node_modules/hoek/test/escaper.js,1
"middleware compatibility
should convert req.body to a Buffer when reqAsBuffer is set
","
    proxyServer = proxyTarget(12346, 100, proxyRouteFn);
  

    var app = express();
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
      extended: false
    }));
    app.use(proxy('localhost:12346', {
      reqAsBuffer: true
    }));
    request(app)
      .post('/poster')
      .send({
        mypost: 'hello',
        doorknob: 'wrect'
      })
      .expect(function(res) {
        assert.equal(res.body.doorknob, 'wrect');
        assert.equal(res.body.mypost, 'hello');
      })
      .end(done);
  

    proxyServer.close();
  
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/express-http-proxy/test/middlewareCompatibility.js,1
"HAS_POSITIVE_NUMERIC_VALUE attrs
passes negated when attribute exists but has value `0`
","
        expect(wrapper.find('tr')).to.not.have.attr('rows')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,1
"authenticate()
errors on an unknown authorization attribute
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123"", ts=""1353788437"", nonce=""k3j4h2"", x=""3"", mac=""/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos="", ext=""hello""'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Unknown attribute: x');
                done();
            });
        
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/hawk/test/server.js,-
"-------------------------------GET ROUTE-------------------------------
[ GET ] should return an array of students
","
    const response = await request(server).get('/api/students');

    expect(Array.isArray(response.body)).toBe(true);
  
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/students/student.test.js,-
"authenticate()
parses a valid authentication header (POST with payload)
","

            var req = {
                method: 'POST',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123456"", ts=""1357926341"", nonce=""1AwuJD"", hash=""qAiXIVv+yjDATneWxZP2YCTa9aHRgQdnH9b3Wc+o3dg="", ext=""some-app-data"", mac=""UeYcj5UoTVaAWXNvJfLVia7kU3VabxCqrccXP8sUGC4=""'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1357926341000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.not.exist();
                expect(credentials.user).to.equal('steve');
                done();
            });
        
",kaxcode/modash-testing,https://github.com/kaxcode/modash-testing/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,-
"-------------------------------GET ROUTE-------------------------------
[ GET 200 ]should return a status code of 200 upon success
","
    const response = await request(server).get('/api/students');

    expect(response.status).toBe(200);

    done();
  
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/students/student.test.js,1
"onLinksUpdated function
should not pass when source and target default ports are both in ports
","
      jest.useFakeTimers();
      const { component } = setup(false, false);
      const { showWarning, updateLoading } = component.props();
      const instance = component.dive().instance();
      const sourcePort = new DefaultDataPortModel(true, '');
      const targetPort = new DefaultDataPortModel(true, '');
      instance.onLinksUpdated({
        link: { sourcePort, targetPort }
      });
      expect(showWarning).toHaveBeenCalledTimes(1);
      expect(updateLoading).toHaveBeenCalledWith(false);
      expect(setTimeout).not.toHaveBeenCalled();
    
",Sean2108/LATTE,https://github.com/Sean2108/LATTE/blob/master/test/components/BuildDiagram.spec.js,-
"with decode = false
decodes by default to utf-8
","

        needle.get('http://localhost:' + port, { decode: false }, function (err, resp) {
          resp.body.should.be.a.String;
          chardet.detect(resp.body).encoding.should.eql('ISO-8859-2');
          resp.body.should.eql('Magyarországi Fióktelepe')
          done();
        })

      
",charliebarber/bloglist,https://github.com/charliebarber/bloglist/blob/master/node_modules/needle/test/decoder_spec.js,0
"authenticate()
errors on a stale timestamp
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123456"", ts=""1362337299"", nonce=""UzmxSs"", ext=""some-app-data"", mac=""wnNUxchvvryMH2RxckTdZ/gY3ijzvccx4keVvELC61w=""'
            };

            Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Stale timestamp');
                var header = err.output.headers['WWW-Authenticate'];
                var ts = header.match(/^Hawk ts\=\""(\d+)\""\, tsm\=\""([^\""]+)\""\, error=\""Stale timestamp\""$/);
                var now = Hawk.utils.now();
                expect(parseInt(ts[1], 10) * 1000).to.be.within(now - 1000, now + 1000);

                var res = {
                    headers: {
                        'www-authenticate': header
                    }
                };

                expect(Hawk.client.authenticate(res, credentials, artifacts)).to.equal(true);
                done();
            });
        
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/hawk/test/server.js,-
"if response contains cookies
must decode it
","
      needle.get(
        'localhost:' + ALL_COOKIES_TEST_PORT, function(error, response) {
          response.cookies.wc.should.be.eql(WEIRD_COOKIE_VALUE);
          response.cookies.bc.should.be.eql(BASE64_COOKIE_VALUE);
          response.cookies.fc.should.be.eql(FORBIDDEN_COOKIE_VALUE);
          response.cookies.nc.should.be.eql(NUMBER_COOKIE_VALUE.toString());
          done();
        });
    
",DemetriusLeonardoBantim/tdd-jest,https://github.com/DemetriusLeonardoBantim/tdd-jest/blob/master/node_modules/needle/test/cookies_spec.js,-
"authenticate()
errors on an missing authorization attribute (mac)
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123"", ts=""1353788437"", nonce=""k3j4h2"", ext=""hello""'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Missing attributes');
                done();
            });
        
",lexblagus/react-class-expensify,https://github.com/lexblagus/react-class-expensify/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,-
"()
passes when the actual matches the expected
","
      expect(wrapper.find('#parent')).to.exist
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/exist.test.js,-
"ComputerAI: determineAttackType() (AI chooses correct attack)
getSearchAttack() is chosen if more than one ship hit exists
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[3][3] = 'H';
    newGameboardPlayer.grid[3][4] = 'H';
    const AIAttack = computerAI.determineAttackType(newGameboardPlayer);
    expect(AIAttack).toBe('alignment');
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,-
"Package
should follow keywords
","
    let matchedKeyword;
    cy.visit(VISIT_URL); // direct visit
    cy.getByTestId(""keywords-list"")
      .find(""a:first"")
      .then(el => {
        matchedKeyword = Cypress.$(el).text();
        console.log({ matchedKeyword });
        return el;
      })
      .click() // click on first keyword
      .then(() =>
        cy.url().should(url => {
          expect(decodeURIComponent(url)).to.include(
            `/search?q=keywords:""${matchedKeyword}""`
          );
        })
      );
  
",topheman/npm-registry-browser,https://github.com/topheman/npm-registry-browser/blob/master/cypress/integration/package.spec.js,-
"HAS_POSITIVE_NUMERIC_VALUE attrs
passes when attribute exists with a string value
","
        expect(wrapper.find('tr')).to.have.attr('cols')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,1
"(name, value)
passes when the actual matches the expected
","
      expect(wrapper).to.have.style('border', '1px')
      expect(wrapper.find('span')).to.have.style('color', 'red')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/style.test.js,-
"passing connection: keep-alive
sends a Connection: keep-alive header (using options.headers.connection)
","
        send_request({ headers: { connection: 'keep-alive' }}, function(err, resp) {
          resp.body.headers['connection'].should.eql('keep-alive');
          done();
        })
      
",ivansoares90/users-api,https://github.com/ivansoares90/users-api/blob/master/node_modules/jest-haste-map/node_modules/fsevents/node_modules/needle/test/headers_spec.js,1
"Hawk
generates a header then successfully parse it then validate payload
","

        var req = {
            method: 'GET',
            url: '/resource/4?filter=a',
            host: 'example.com',
            port: 8080
        };

        credentialsFunc('123456', function (err, credentials1) {

            req.authorization = Hawk.client.header('http://example.com:8080/resource/4?filter=a', req.method, { credentials: credentials1, payload: 'hola!', ext: 'some-app-data' }).field;
            Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials2, artifacts) {

                expect(err).to.not.exist();
                expect(credentials2.user).to.equal('steve');
                expect(artifacts.ext).to.equal('some-app-data');
                expect(Hawk.server.authenticatePayload('hola!', credentials2, artifacts)).to.be.true();
                expect(Hawk.server.authenticatePayload('hello!', credentials2, artifacts)).to.be.false();
                done();
            });
        });
    
",yashnerella/reactJs-basicsJest,https://github.com/yashnerella/reactJs-basicsJest/blob/master/node_modules/hawk/test/index.js,1
"with default options
no cookie header is set on request
","
      needle.get(
        'localhost:' + ALL_COOKIES_TEST_PORT, function(err, response) {
          should.not.exist(response.req._headers.cookie);
          done();
        });
    
",DemetriusLeonardoBantim/tdd-jest,https://github.com/DemetriusLeonardoBantim/tdd-jest/blob/master/node_modules/needle/test/cookies_spec.js,1
"Server User on Initial Page Load
it does not create a new server user with a new user
","
      cy.checkPlayerCount();
    
",TimMansell/vue-solitaire,https://github.com/TimMansell/vue-solitaire/blob/master/tests/e2e/specs/user.spec.js,0
"(key)
passes negated when the actual does not match the expected
","
      expect(wrapper.find(User).first()).to.not.have.prop('invalid')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/prop.test.js,-
"------------------------------- PUT ROUTE-------------------------------
[ PUT  ] should update student name
","
    await request(server).post('/api/students/').send({
      name: 'mikko',
      cohort: 'web16',
    });
    await request(server).put('/api/students/3').send({
      name: 'new name',
    });
    const response = await request(server).get('/api/students/3');
    expect(response.body.name).toBe('new name');
  
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/students/student.test.js,1
"authenticate()
errors on an bad authorization attribute value
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""\t"", ts=""1353788437"", nonce=""k3j4h2"", mac=""/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos="", ext=""hello""'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Bad attribute value: id');
                done();
            });
        
",tmtarpinian/jest_introduction,https://github.com/tmtarpinian/jest_introduction/blob/master/node_modules/hawk/test/server.js,-
"Gameboard: receiveAttack() (Check if attack is valid)
Ship with 1 length is sunk after 1 attack received
","
    const newGameboard = Gameboard(0, 8);
    const newShip = Ship(0, 1, [], false, 'horizontal');
    newGameboard.placeShip(newShip, [1, 3]);
    newGameboard.receiveAttack([1, 3]);
    expect(newShip.isSunk()).toBe(true);
    expect(newGameboard.grid[1][3]).toBe('S');
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/gameboard.test.js,1
"proxies cookie
set cookie
","
    proxyServer = proxyTarget(12346, 100, proxyRouteFn);
    app = express();
    app.use(proxy('localhost:12346'));
  

    request(app)
      .get('/cookieTest')
      .set('Cookie', 'myApp-token=12345667')
      .end(function(err, res) {
        var cookiesMatch = res.headers['set-cookie'].filter(function(item) {
          return item.match(/myApp-token=12345667/);
        });
        assert(cookiesMatch);
        done(err);
      });
  

    proxyServer.close();
  
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/express-http-proxy/test/cookies.js,1
"HAS_POSITIVE_NUMERIC_VALUE attrs
passes negated when attribute exists but has value `""0""`
","
        expect(wrapper.find('tr')).to.not.have.attr('size')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,1
"()
passes negated when the actual does not match the expected
","
      expect(wrapper.find('#not')).to.not.be.disabled()
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/disabled.test.js,-
"unauthorized()
returns a WWW-Authenticate header when passed a scheme
","

        var err = Boom.unauthorized('boom', 'Test');
        expect(err.output.statusCode).to.equal(401);
        expect(err.output.headers['WWW-Authenticate']).to.equal('Test error=""boom""');
        done();
    
",JamieDixon/jest-tester,https://github.com/JamieDixon/jest-tester/blob/master/webapp/node_modules/boom/test/index.js,1
"authenticateMessage()
errors on invalid authorization (ts)
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                delete auth.ts;

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Invalid authorization');
                    done();
                });
            });
        
",nialloc9/reactReduxJestBoilerplate,https://github.com/nialloc9/reactReduxJestBoilerplate/blob/master/node_modules/hawk/test/server.js,-
"when username/password are included in URL
sends Authorization header
","
      needle.get('foobar:jakub@localhost:' + port, opts, function(err, resp) {
        var sent_headers = resp.body.headers;
        Object.keys(sent_headers).should.containEql('authorization');
        done();
      })
    
",SidiOuld/Testing-With-Jest,https://github.com/SidiOuld/Testing-With-Jest/blob/master/node_modules/needle/test/basic_auth_spec.js,1
"valueType
returns calc from calc(100px * 2)
","
    let input = 'calc(100px * 2)';
    let output = parsers.valueType(input);

    expect(output).toEqual(parsers.TYPES.CALC);
  
",buraktelli/Backend-and-Test,https://github.com/buraktelli/Backend-and-Test/blob/master/node_modules/cssstyle/lib/parsers.test.js,1
"server
opts out of string encoding
","
            ReactDOM.render(
                <Helmet
                    encodeSpecialCharacters={false}
                    title={""This is text and & and '.""}
                />,
                container
            );

            const head = Helmet.rewind();
            expect(head.title).to.exist;
            expect(head.title).to.respondTo(""toString"");

            expect(head.title.toString()).to.equal(unEncodedStringifiedTitle);
        
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/react-helmet/test/HelmetTest.js,-
"Plus Minus
should return [""1.000000"",""0.000000"",""0.000000""] when arr is [1,1,1,1]
","
    expect(plusMinus([1, 1, 1, 1])).toEqual(['1.000000', '0.000000', '0.000000']);
  
",YannickLeRoux/tdd-katas-typescript,https://github.com/YannickLeRoux/tdd-katas-typescript/blob/master/plus-minus/src/plus-minus.test.js,1
"middleware compatibility
should stringify req.body when it is a json body so it is written to proxy request
","
    proxyServer = proxyTarget(12346, 100, proxyRouteFn);
  

    var app = express();
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
      extended: false
    }));
    app.use(proxy('localhost:12346'));
    request(app)
      .post('/poster')
      .send({
        mypost: 'hello',
        doorknob: 'wrect'
      })
      .expect(function(res) {
        assert.equal(res.body.doorknob, 'wrect');
        assert.equal(res.body.mypost, 'hello');
      })
      .end(done);
  

    proxyServer.close();
  
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/express-http-proxy/test/middlewareCompatibility.js,1
"core
should generate a header protocol example (with payload)
","

            var header = Hawk.client.header('http://example.com:8000/resource/1?b=1&a=2', 'POST', payloadOptions).field;

            expect(header).to.equal('Hawk id=""dh37fgj492je"", ts=""1353832234"", nonce=""j4h3g2"", hash=""Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY="", ext=""some-app-ext-data"", mac=""aSe1DERmZuRl3pI36/9BdZmnErTw3sNzOOAUlfeKjVw=""');
            done();
        
",lammypham/front-end-testing,https://github.com/lammypham/front-end-testing/blob/master/node_modules/fsevents/node_modules/hawk/test/readme.js,1
"authenticate()
errors on invalid credentials (id)
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123"", ts=""1353788437"", nonce=""k3j4h2"", mac=""/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos="", ext=""hello""'
            };

            var credentialsFuncion = function (id, callback) {

                var credentials = {
                    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                    user: 'steve'
                };

                return callback(null, credentials);
            };

            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.message).to.equal('Invalid credentials');
                expect(err.output.payload.message).to.equal('An internal server error occurred');
                done();
            });
        
",tmtarpinian/jest_introduction,https://github.com/tmtarpinian/jest_introduction/blob/master/node_modules/hawk/test/server.js,1
"getSecretWord action creator
adds response word to state
","
    moxios.install();
  

    const secretWord = ""party"";
    const store = storeFactory();

    moxios.wait(() => {
      const request = moxios.requests.mostRecent();
      request.respondWith({
        status: 200,
        response: secretWord
      });
    });

    return store.dispatch(getSecretWord()).then(() => {
      const newState = store.getState();
      expect(newState.secretWord).toBe(secretWord);
    });
  

    moxios.uninstall();
  
",alexsjcho/jotto-react-jest-enyzme-testing,https://github.com/alexsjcho/jotto-react-jest-enyzme-testing/blob/master/src/actions/index.test.js,1
"accept
should not throw and return true if file is empty or null
","
    expect(() => {
      accept({})
      accept({}, 'text/html')
      accept({}, '*.png')
      accept({}, 'image/*')

      accept(null)
      accept(null, 'text/html')
      accept(null, '*.png')
      accept(null, 'image/*')
    }).toNotThrow()
  
",jackyyap/jestecmern,https://github.com/jackyyap/jestecmern/blob/master/backend/node_modules/attr-accept/test/index.js,1
"onLinksUpdated function
should not pass when source diamond and target default ports are both out ports
","
      jest.useFakeTimers();
      const { component } = setup(false, false);
      const { showWarning, updateLoading } = component.props();
      const instance = component.dive().instance();
      const sourcePort = new DiamondPortModel('top', false, '');
      const targetPort = new DefaultDataPortModel(false, '');
      instance.onLinksUpdated({
        link: { sourcePort, targetPort }
      });
      expect(showWarning).toHaveBeenCalledTimes(1);
      expect(updateLoading).toHaveBeenCalledWith(false);
      expect(setTimeout).not.toHaveBeenCalled();
    
",Sean2108/LATTE,https://github.com/Sean2108/LATTE/blob/master/test/components/BuildDiagram.spec.js,1
"nonNegativeInteger
fails on negative numbers
","
    assertFails(_.nonNegativeInteger, /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: -1
    }), 'a');
    assertFails(_.nonNegativeInteger, /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: -42
    }), 'a');
  
",Sunnypahuja/jest-enzyme,https://github.com/Sunnypahuja/jest-enzyme/blob/master/node_modules/airbnb-prop-types/build-test/nonNegativeInteger.js,1
"valueType
returns color for rgba(n, n, n, n) with decimal alpha
","
    let input = 'rgba(10, 10, 10, 0.5)';
    let output = parsers.valueType(input);

    expect(output).toEqual(parsers.TYPES.COLOR);
  
",rmoramo1/Unit-Test-With-Jest,https://github.com/rmoramo1/Unit-Test-With-Jest/blob/master/node_modules/cssstyle/lib/parsers.test.js,1
"nodeIsSufficient(node)
returns false if node text length < 100 chars
","
      const $ = cheerio.load(HTML.tooShort);
      const sufficient = nodeIsSufficient($.root());
      assert.equal(sufficient, false);
    
",postlight/mercury-parser,https://github.com/postlight/mercury-parser/blob/master/src/utils/dom/node-is-sufficient.test.js,1
"regular attrs
passes negated when attribute exists but has value `null`
","
        expect(wrapper.find('audio')).to.not.have.attr('spellcheck')
        expect(wrapper.find('audio')).to.not.have.attr('spellCheck')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,0
"Logger
should log a Warning Message
","
            var flow = [{id: ""n1"", type: ""function"", wires: [[""n2""]], func: ""node.warn('test');""}];
            helper.load(functionNode, flow, function () {
                var n1 = helper.getNode(""n1"");
                n1.receive({payload: ""foo"", topic: ""bar""});
                try {
                    helper.log().called.should.be.true();
                    var logEvents = helper.log().args.filter(function (evt) {
                        return evt[0].type == ""function"";
                    });
                    logEvents.should.have.length(1);
                    var msg = logEvents[0][0];
                    msg.should.have.property('level', helper.log().WARN);
                    msg.should.have.property('id', 'n1');
                    msg.should.have.property('type', 'function');
                    msg.should.have.property('msg', 'test');
                    done();
                } catch (err) {
                    done(err);
                }
            });
        
",crudaz/mongodb-testing,https://github.com/crudaz/mongodb-testing/blob/master/node_modules/node-red-node-test-helper/examples/function_spec.js,-
"runAllTimers
only runs a setTimeout callback once (ever)
","
      const global = {process};
      const timers = new FakeTimers(global, moduleMocker);
      timers.useFakeTimers();

      const fn = jest.genMockFn();
      global.setTimeout(fn, 0);
      expect(fn.mock.calls.length).toBe(0);

      timers.runAllTimers();
      expect(fn.mock.calls.length).toBe(1);

      timers.runAllTimers();
      expect(fn.mock.calls.length).toBe(1);
    
",git-palace/jest,https://github.com/git-palace/jest/blob/master/packages/jest-util/src/__tests__/FakeTimers-test.js,1
"mediaQueries
should have an ""xxl"" breakpoint
","
    const Div = styled.div`
      ${mq.s`content: ""test"";`};
    `;
    const renderedComponent = shallow(<Div />);
    expect(toJson(renderedComponent)).toMatchSnapshot();
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/styles/templates/tests/mediaQueries.test.js,0
"Combinators
.yieldSelf - allows an inline block to receive a named expression result
","
  expect(yieldSelf(3 + 3)(sum => sum * 2)).toEqual(12)

",axehomeyg/jest-marmot,https://github.com/axehomeyg/jest-marmot/blob/master/__tests__/utility.test.js,-
"Logger
should log an Error Message
","
            var flow = [{id: ""n1"", type: ""function"", wires: [[""n2""]], func: ""node.error('test');""}];
            helper.load(functionNode, flow, function () {
                var n1 = helper.getNode(""n1"");
                n1.receive({payload: ""foo"", topic: ""bar""});
                try {
                    helper.log().called.should.be.true();
                    var logEvents = helper.log().args.filter(function (evt) {
                        return evt[0].type == ""function"";
                    });
                    logEvents.should.have.length(1);
                    var msg = logEvents[0][0];
                    msg.should.have.property('level', helper.log().ERROR);
                    msg.should.have.property('id', 'n1');
                    msg.should.have.property('type', 'function');
                    msg.should.have.property('msg', 'test');
                    done();
                } catch (err) {
                    done(err);
                }
            });
        
",crudaz/mongodb-testing,https://github.com/crudaz/mongodb-testing/blob/master/node_modules/node-red-node-test-helper/examples/function_spec.js,-
"authenticate()
does not error on nonce collision if keys differ
","

            var reqSteve = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123"", ts=""1353788437"", nonce=""k3j4h2"", mac=""bXx7a7p1h9QYQNZ8x7QhvDQym8ACgab4m3lVSFn4DBw="", ext=""hello""'
            };

            var reqBob = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""456"", ts=""1353788437"", nonce=""k3j4h2"", mac=""LXfmTnRzrLd9TD7yfH+4se46Bx6AHyhpM94hLCiNia4="", ext=""hello""'
            };

            var credentialsFuncion = function (id, callback) {

                var credentials = {
                    '123': {
                        id: id,
                        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                        algorithm: (id === '1' ? 'sha1' : 'sha256'),
                        user: 'steve'
                    },
                    '456': {
                        id: id,
                        key: 'xrunpaw3489ruxnpa98w4rxnwerxhqb98rpaxn39848',
                        algorithm: (id === '1' ? 'sha1' : 'sha256'),
                        user: 'bob'
                    }
                };

                return callback(null, credentials[id]);
            };

            var memoryCache = {};
            var options = {
                localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(),
                nonceFunc: function (key, nonce, ts, callback) {

                    if (memoryCache[key + nonce]) {
                        return callback(new Error());
                    }

                    memoryCache[key + nonce] = true;
                    return callback();
                }
            };

            Hawk.server.authenticate(reqSteve, credentialsFuncion, options, function (err, credentials1, artifacts1) {

                expect(err).to.not.exist();
                expect(credentials1.user).to.equal('steve');

                Hawk.server.authenticate(reqBob, credentialsFuncion, options, function (err, credentials2, artifacts2) {

                    expect(err).to.not.exist();
                    expect(credentials2.user).to.equal('bob');
                    done();
                });
            });
        
",Sstobo/Jest-Testing,https://github.com/Sstobo/Jest-Testing/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,-
"input[type = number]
allows the HTML input attributes ""disabled"", ""max"", ""min"", ""name"", ""readonly"", ""required"", to be set
","
      let props = {
        inputType: 'number',
        labelText: 'test',
        isDisabled: true,
        numMax: 999,
        numMin: -999,
        inputName: 'test-input',
        isReadonly: true,
        isRequired: true,
        inputId: 'testId'
      };

      let wrapper = mountInput({
        propsData: props
      });

      let input = wrapper.vm.$el.querySelector('.bit-input--field');

      expect(input.disabled).toEqual(props.isDisabled);
      expect(parseInt(input.getAttribute('max'))).toEqual(props.numMax);
      expect(parseInt(input.getAttribute('min'))).toEqual(props.numMin);
      expect(input.required).toEqual(props.isRequired);
      expect(input.name).toEqual(props.inputName);
      expect(input.readOnly).toEqual(props.isReadonly);
      expect(input.id).toEqual(props.inputId);
    
",stangerjm/smart-x,https://github.com/stangerjm/smart-x/blob/master/Vue-components/__tests__/bit-input.spec.js,-
"(value)
passes when the actual matches the expected
","
      expect(wrapper.find('input')).to.have.value('test')
      expect(wrapper.find('textarea')).to.have.value('test')
      expect(wrapper.find('select')).to.have.value('test')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/value.test.js,0
"with stream option enabled
persists styles between toHtml() invocations
","
            const text = ['\x1b[31mred', 'also red'];
            const result = '<span style=""color:#A00"">red</span><span style=""color:#A00"">also red</span>';

            return test(text, result, done, {stream: true});
        
",defikabulan/keranjang-ppl,https://github.com/defikabulan/keranjang-ppl/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,-
"authenticateMessage()
errors on invalid authorization (hash)
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                delete auth.hash;

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Invalid authorization');
                    done();
                });
            });
        
",dineshselvantdm/twitter-web-app,https://github.com/dineshselvantdm/twitter-web-app/blob/master/node_modules/hawk/test/server.js,-
"subnet() method with mask length 31
should compute ipv4 network's last address
","
      assert.equal(ipv4Subnet.lastAddress, '192.168.1.135');
    
",ferdiemcdaniel/simple-jest-enzyme,https://github.com/ferdiemcdaniel/simple-jest-enzyme/blob/master/node_modules/ip/test/api-test.js,1
"`guessWord` action creator
`guessWord` was called once
","
    // create a mock function for `getSecretWord`
    guessWordMock = jest.fn();

    // set up Input, with guessWordMock as a prop
    wrapper = shallow(<UnconnectedInput guessWord={guessWordMock} />);

    // simulate the input
    wrapper.instance().inputBox.current = { value: guessedWord };

    // simulate click on submit button
    const submit = findByTestAttr(wrapper, ""submit-button"");
    submit.simulate(""click"", { preventDefault() {} });
  

    const guessWordCallCount = guessWordMock.mock.calls.length;
    expect(guessWordCallCount).toBe(1);
  
",alexsjcho/jotto-react-jest-enyzme-testing,https://github.com/alexsjcho/jotto-react-jest-enyzme-testing/blob/master/src/Input.test.js,1
"authenticate()
errors on an bad authorization header format
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123\\"", ts=""1353788437"", nonce=""k3j4h2"", mac=""/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos="", ext=""hello""'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Bad header format');
                done();
            });
        
",lexblagus/react-class-expensify,https://github.com/lexblagus/react-class-expensify/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,-
"Gameboard: receiveAttack() (Check if attack is valid)
Gameboard allows attack on a ship (3 attacks)
","
    const newGameboard = Gameboard(0, 8);
    const newShip = Ship(0, 4, [], false, 'horizontal');
    newGameboard.placeShip(newShip, [1, 3]);
    newGameboard.receiveAttack([1, 3]);
    expect(newShip.hits).toEqual([0]);
    expect(newGameboard.grid[1][3]).toBe('H');
    newGameboard.receiveAttack([1, 4]);
    expect(newShip.hits).toEqual([0, 1]);
    expect(newGameboard.grid[1][4]).toBe('H');
    newGameboard.receiveAttack([1, 5]);
    expect(newShip.hits).toEqual([0, 1, 2]);
    expect(newGameboard.grid[1][5]).toBe('H');
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/gameboard.test.js,0
"authenticate()
errors on an invalid authentication header: no scheme
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: '!@#'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Invalid header syntax');
                done();
            });
        
",Sstobo/Jest-Testing,https://github.com/Sstobo/Jest-Testing/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,-
"stream_length set to invalid value
sets Content-Length header to that value
","
      send_request({ stream_length: 5 }, function(err, resp) {
        should.exist(err);
        err.code.should.eql('ECONNRESET');
        done()
      })
    
",AnniePawl/JS-String-Library,https://github.com/AnniePawl/JS-String-Library/blob/master/node_modules/fsevents/node_modules/needle/test/request_stream_spec.js,0
"mediaQueries
should have an ""s"" breakpoint
","
    const Div = styled.div`
      ${mq.s`content: ""test"";`};
    `;
    const renderedComponent = shallow(<Div />);
    expect(toJson(renderedComponent)).toMatchSnapshot();
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/styles/templates/tests/mediaQueries.test.js,1
"<Requeriments />
Render h1 component
","
        expect(requeriments.find('.requerimentsText').text()).toEqual('requeriments.title')
    
",nkrowicki/woloxChallenge,https://github.com/nkrowicki/woloxChallenge/blob/master/src/__test__/components/Requeriments.test.js,-
"ComputerAI: getAlignmentAttack (Get the correct positions of the end points of ship parts discovered)
Attack is made south/bottom of the ship
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[2][3] = 'X';
    newGameboardPlayer.grid[3][3] = 'H';
    newGameboardPlayer.grid[4][3] = 'H';
    newGameboardPlayer.grid[5][3] = 'H';
    const alignmentObj = computerAI.getAlignment(newGameboardPlayer);
    const alignmentCoords = computerAI.getAlignmentAttack(
      newGameboardPlayer,
      alignmentObj[0],
      alignmentObj[1],
      alignmentObj[2],
    );
    expect(alignmentCoords).toStrictEqual([6, 3]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,1
"------------------------------- DELETE ROUTE------------------------------- 
[ DELETE 200 ] should give status of 200
","
    await request(server).post('/api/students/').send({
      name: 'mikko',
      cohort: 'web16',
    });
    const response = await request(server).delete('/api/students/2');
    expect(response.status).toBe(200);
  
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/students/student.test.js,1
"Sum function
to contain
","
     let arraycont = ['item1', 'item2', 'item3']
     expect(array.addItem4(arraycont)).toContain('item4')
   
",Paulo-Dandrea/fullStackChallenges,https://github.com/Paulo-Dandrea/fullStackChallenges/blob/master/Bloco9/jest/testes.test.js,0
"#timeout
should emit timeout event and execute the next task when a task timeout by default","var queue = SeqQueue.createQueue();
			var executedTaskCount = 0;
			var timeoutCount = 0;
			var onTimeoutCount = 0;
			//add timeout listener
			queue.on('timeout', function(task) {
				task.should.be.a('object');
				task.fn.should.be.a('function');
				timeoutCount++;
			});
			
			queue.push(function(task) {
				executedTaskCount++;
				//no task.done() invoke to cause a timeout
			}, function() {
				onTimeoutCount++;
			}).should.be.true;
			
			queue.push(function(task) {
				executedTaskCount++;
				task.done();
			}).should.be.true;
			
			setTimeout(function() {
				//wait all task finish
				executedTaskCount.should.be.equal(2);
				timeoutCount.should.be.equal(1);
				onTimeoutCount.should.be.equal(1);
				done();
			}, 4000);	//default timeout is 3s",,https://github.com/LaneriTiago/nodejs-tdd-jest/blob/master/node_modules/seq-queue/test/seq-queue-test.js,-
"()
fails when the actual does not match the expected
","
      expect(() => {
        expect(wrapper.find('#notfound')).to.exist
      }).to.throw('to exist')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/exist.test.js,-
"authenticate()
errors on unknown bad mac
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123"", ts=""1353788437"", nonce=""k3j4h2"", mac=""/qwS4UjfVWMcU4jlr7T/wuKe3dKijvTvSos="", ext=""hello""'
            };

            var credentialsFuncion = function (id, callback) {

                var credentials = {
                    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                    algorithm: 'sha256',
                    user: 'steve'
                };

                return callback(null, credentials);
            };

            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Bad mac');
                done();
            });
        
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,-
"whitespace preservation
preserves lines for ugly code
","
      expectTransform([
        'function',
        '',
        'foo    (',
        '    x,',
        '          ...args',
        '',
        ')',
        '',
        '        {',
        ' return         args;',
        '}'
      ].join('\n'), [
        'function',
        '',
        'foo    (',
        '    x',
        '          ',
        '',
        ')',
        '',
        '        {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;' +
          '$__0++) args.push(arguments[$__0]);',
        ' return         args;',
        '}'
      ].join('\n'));
    
",Moverr/jestcodecov,https://github.com/Moverr/jestcodecov/blob/master/bluh/node_modules/jstransform/visitors/__tests__/es6-rest-param-visitors-test.js,-
"authenticateMessage()
should fail authorization on credentials error
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                expect(auth).to.exist();

                var errFunc = function (id, callback) {

                    callback(new Error('kablooey'));
                };

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('kablooey');
                    done();
                });
            });
        
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/hawk/test/server.js,-
"authenticate()
errors on invalid credentials (key)
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123"", ts=""1353788437"", nonce=""k3j4h2"", mac=""/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos="", ext=""hello""'
            };

            var credentialsFuncion = function (id, callback) {

                var credentials = {
                    id: '23434d3q4d5345d',
                    user: 'steve'
                };

                return callback(null, credentials);
            };

            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.message).to.equal('Invalid credentials');
                expect(err.output.payload.message).to.equal('An internal server error occurred');
                done();
            });
        
",sethcarrino/redux-jest-testing,https://github.com/sethcarrino/redux-jest-testing/blob/master/node_modules/hawk/test/server.js,-
"Text and Subfield Search
Can perform a cast search with one cast member
","
    await MoviesDAO.injectDB(global.mflixClient)
  

    const filters = { cast: [""Elon Musk""] }
    const { moviesList, totalNumMovies } = await MoviesDAO.getMovies({
      filters,
    })
    expect(moviesList.length).toEqual(1)
    expect(totalNumMovies).toEqual(1)
    const firstMovie = moviesList[0]
    expect(firstMovie[""title""]).toEqual(""Racing Extinction"")
  
",sourabh-repo/mflix-node-app,https://github.com/sourabh-repo/mflix-node-app/blob/master/test/text-subfield.test.js,0
"gensync(function* () {})
yield unexpected object
","
    const fn = gensync(function*() {
      yield {};
    });

    try {
      await fn.async();

      throwTestError();
    } catch (err) {
      expect(err.message).toMatch(
        /Got unexpected yielded value in gensync generator/
      );
      expect(err.code).toBe(""GENSYNC_EXPECTED_START"");
    }
  
",rainstr7/testJest,https://github.com/rainstr7/testJest/blob/master/node_modules/gensync/test/index.test.js,-
"<Benefit />
Render component benefit
","
        expect(benefit.length).toEqual(1);
    
",nkrowicki/woloxChallenge,https://github.com/nkrowicki/woloxChallenge/blob/master/src/__test__/components/Benefit.test.js,1
"when username is a valid string, and password is null
sends Authorization header
","
      needle.get('localhost:' + port, opts, function(err, resp) {
        var sent_headers = resp.body.headers;
        Object.keys(sent_headers).should.containEql('authorization');
        done();
      })
    
",lhg1995/lesson,https://github.com/lhg1995/lesson/blob/master/node_modules/_fsevents@1.2.11@fsevents/node_modules/needle/test/basic_auth_spec.js,1
"authenticateMessage()
should fail authorization on bad hash
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                expect(auth).to.exist();

                Hawk.server.authenticateMessage('example.com', 8080, 'some message1', auth, credentialsFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Bad message hash');
                    done();
                });
            });
        
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/hawk/test/uri.js,-
"constructed with no options
handles resets with implicit 0
","
            const text = '\x1b[1mthis is bold\x1b[m, but this isn\'t';
            const result = '<b>this is bold</b>, but this isn\'t';

            return test(text, result, done);
        
",defikabulan/keranjang-ppl,https://github.com/defikabulan/keranjang-ppl/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,-
"substitute
should substitute
","
      var input = [
        bin('011000 010001 011110 111010'),
        bin('100001 100110 010100 100111')
      ];
      var output = utils.substitute(input[0], input[1]);
      assert.equal(output, bin('0101 1100 1000 0010 1011 0101 1001 0111'));
    
",matloc13/jest-test-blog,https://github.com/matloc13/jest-test-blog/blob/master/node_modules/des.js/test/utils-test.js,0
"Credentials
should generate an api_key
","
    cy.visit(APP_URL);

    cy.get(""#header-login-button"").click();
    cy.get(""#modal-login"");

    cy.get(""#email-field"").type(""lucas@lucas.me"");
    cy.get(""#password-field"").type(""1234"");
    cy.get(""#submit-button"").click();

    cy.wait(4000);
    cy.visit(`${APP_URL}/credentials`);
    cy.wait(2000);

    const oldApiKey = cy.get(""#apikey"").invoke(""text"");
    cy.get(""#generate-apikey"").click();
    cy.wait(2000);
    const newApiKey = cy.get(""#apikey"").invoke(""text"");

    expect(oldApiKey).to.not.equal(newApiKey);
  
",lucas-salles/feedbacker,https://github.com/lucas-salles/feedbacker/blob/master/dashboard/tests/e2e/specs/credentials.js,0
"valueType
returns color for rgb(n, n, n)
","
    let input = 'rgb(10, 10, 10)';
    let output = parsers.valueType(input);

    expect(output).toEqual(parsers.TYPES.COLOR);
  
",Jleimer/jest-another-RPG,https://github.com/Jleimer/jest-another-RPG/blob/master/node_modules/cssstyle/lib/parsers.test.js,-
"header()
returns a valid authorization header (empty payload)
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            };

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', { credentials: credentials, timestamp: 1353809207, nonce: 'Ygvqdz', payload: '', contentType: 'text/plain' }).field;
            expect(header).to.equal('Hawk id=\""123456\"", ts=\""1353809207\"", nonce=\""Ygvqdz\"", hash=\""q/t+NNAkQZNlq/aAD6PlexImwQTxwgT2MahfTa9XRLA=\"", mac=\""U5k16YEzn3UnBHKeBzsDXn067Gu3R4YaY6xOt9PYRZM=\""');
            done();
        
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/fsevents/node_modules/hawk/test/client.js,1
"mediaQueries
should have an ""m"" breakpoint
","
    const Div = styled.div`
      ${mq.m`content: ""test"";`};
    `;
    const renderedComponent = shallow(<Div />);
    expect(toJson(renderedComponent)).toMatchSnapshot();
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/styles/templates/tests/mediaQueries.test.js,1
"Polygon Within
should return false if one of the points in a multipoint leave the polygon
","
      polygon = new Terraformer.Polygon([ [ [ 5, 5 ], [ 5, 15 ], [ 15, 15 ], [ 15, 5 ], [ 5, 5 ] ] ]);
    

      var ls = new Terraformer.MultiPoint([ [ 6, 6 ], [ 6, 14 ], [ 16, 16 ] ]);
      expect(ls.within(polygon)).toEqual(false);
    
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/terraformer/spec/terraformerSpec.js,1
"Gameboard: receiveAttack() (Check if attack is valid)
Gameboard allows attack on a ship (2 attacks)
","
    const newGameboard = Gameboard(0, 8);
    const newShip = Ship(0, 3, [], false, 'horizontal');
    newGameboard.placeShip(newShip, [1, 3]);
    newGameboard.receiveAttack([1, 3]);
    expect(newShip.hits).toEqual([0]);
    expect(newGameboard.grid[1][3]).toBe('H');
    newGameboard.receiveAttack([1, 4]);
    expect(newShip.hits).toEqual([0, 1]);
    expect(newGameboard.grid[1][4]).toBe('H');
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/gameboard.test.js,0
"(key, value)
passes when the actual matches the expected
","
      expect(wrapper.find(User).first()).to.have.prop('index', 1)
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/prop.test.js,0
"integer
passes on negative numbers
","
    assertPasses((0, _.integer)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: -1
    }), 'a');
    assertPasses((0, _.integer)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: -42
    }), 'a');
  
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/airbnb-prop-types/build-test/integer.js,1
"redux properties
`getSecretWord` runs when component is mounted
","

    const getSecretWordMock = jest.fn();
    //const getSecretWordMock = getSecretWord;

    const props = {
        getSecretWord: getSecretWordMock,
        success: false,
        guessedWords: [],
    }
    
    const wrapper = shallow(<UnconnectedApp {...props} />)


    // run the lifecycle method...
    wrapper.instance().componentDidMount();

    // Did our mock function get called?
    const getSecretWordCallCount = getSecretWordMock.mock.calls.length;
    expect(getSecretWordCallCount).toBe(1);


",deepbsd/jestclass,https://github.com/deepbsd/jestclass/blob/master/jotto/src/App.test.js,1
"ComputerAI: getAlignmentAttack (Get the correct positions of the end points of ship parts discovered)
Attack is made west/left of the ship
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[3][2] = 'H';
    newGameboardPlayer.grid[3][3] = 'H';
    newGameboardPlayer.grid[3][4] = 'H';
    newGameboardPlayer.grid[3][5] = '0';
    const alignmentObj = computerAI.getAlignment(newGameboardPlayer);
    const alignmentCoords = computerAI.getAlignmentAttack(
      newGameboardPlayer,
      alignmentObj[0],
      alignmentObj[1],
      alignmentObj[2],
    );
    expect(alignmentCoords).toStrictEqual([3, 1]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,-
"authenticateMessage()
should fail authorization on invalid authorization
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                expect(auth).to.exist();
                delete auth.id;

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Invalid authorization');
                    done();
                });
            });
        
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/hawk/test/server.js,-
"authenticate()
errors on an invalid authorization header format
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Invalid header syntax');
                done();
            });
        
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/hawk/test/server.js,1
"(nodes)
passes negated when the actual does not match the expected
","
      expect(wrapper).to.not.contain([<User index={3} />, <User index={4} />])
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/contain.test.js,-
"with stream option enabled
removes one state when encountering a reset
","
            const text = ['\x1b[1mthis is bold\x1b[0m, but this isn\'t', ' nor is this'];
            const result = '<b>this is bold</b>, but this isn\'t nor is this';

            return test(text, result, done, {stream: true});
        
",defikabulan/keranjang-ppl,https://github.com/defikabulan/keranjang-ppl/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,1
"getBewit()
returns a valid bewit value
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            };

            var bewit = Hawk.uri.getBewit('https://example.com/somewhere/over/the/rainbow', { credentials: credentials, ttlSec: 300, localtimeOffsetMsec: 1356420407232 - Hawk.utils.now(), ext: 'xandyandz' });
            expect(bewit).to.equal('MTIzNDU2XDEzNTY0MjA3MDdca3NjeHdOUjJ0SnBQMVQxekRMTlBiQjVVaUtJVTl0T1NKWFRVZEc3WDloOD1ceGFuZHlhbmR6');
            done();
        
",Sstobo/Jest-Testing,https://github.com/Sstobo/Jest-Testing/blob/master/node_modules/fsevents/node_modules/hawk/test/uri.js,1
"about
renders as expected
","
    cy.visit(""/about"");
    cy.injectAxe();

    // Ensure expected links are all present
    links.forEach(({ href, name }) => {
      cy.findByRole(""link"", { name })
        .should(""have.attr"", ""href"", href)
        .and(""be.visible"");
    });

    cy.checkA11y();
    cy.percySnapshot(""about page renders as expected"");
  
",ismay/superwolff,https://github.com/ismay/superwolff/blob/master/.cypress/integration/about.test.js,-
"gziptarball.pipe(unpack(directory, callback))
unpacks the tarball into the directory
","
    read(__dirname + '/fixtures/packed.tar.gz').pipe(tar.unpack(__dirname + '/output/unpacked', function (err) {
      if (err) return done(err)
      assert.equal(rfile('./output/unpacked/bar.txt'), rfile('./fixtures/to-pack/bar.txt'))
      assert.equal(rfile('./output/unpacked/foo.txt'), rfile('./fixtures/to-pack/foo.txt'))
      done()
    }))
  
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/fsevents/node_modules/tar-pack/test/index.js,1
"test users route
it should calss
","
        expect(1).toBe(1);
    
",sarangan/jest-test,https://github.com/sarangan/jest-test/blob/master/server.test.js,0
"Uri
should generate a bewit then successfully authenticate it
","

        var req = {
            method: 'GET',
            url: '/resource/4?a=1&b=2',
            host: 'example.com',
            port: 80
        };

        credentialsFunc('123456', function (err, credentials1) {

            var bewit = Hawk.uri.getBewit('http://example.com/resource/4?a=1&b=2', { credentials: credentials1, ttlSec: 60 * 60 * 24 * 365 * 100, ext: 'some-app-data' });
            req.url += '&bewit=' + bewit;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials2, attributes) {

                expect(err).to.not.exist();
                expect(credentials2.user).to.equal('steve');
                expect(attributes.ext).to.equal('some-app-data');
                done();
            });
        });
    
",kaxcode/modash-testing,https://github.com/kaxcode/modash-testing/blob/master/node_modules/fsevents/node_modules/hawk/test/uri.js,1
"integer
passes on positive numbers
","
    assertPasses((0, _.integer)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: 1
    }), 'a');
    assertPasses((0, _.integer)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: 42
    }), 'a');
  
",Sunnypahuja/jest-enzyme,https://github.com/Sunnypahuja/jest-enzyme/blob/master/node_modules/airbnb-prop-types/build-test/integer.js,1
"$unshift
only unshifts unto an array
","
      expect(update.bind(null, 1, {$unshift: 7})).toThrow(
        'update(): expected target of $unshift to be an array; got 1.'
      );
    
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/immutability-helper/test.js,1
"Player: madeAttack() (Player makes attack to grid) 
Player 1 makes attacks successfully to grid #2
","
    const newPlayer1 = Player(0, 'human', 'default', 'blue');
    const newGameboard2 = Gameboard(0, 8);
    newPlayer1.makeAttack(newGameboard2, [4, 3]);
    newPlayer1.makeAttack(newGameboard2, [4, 4]);
    newPlayer1.makeAttack(newGameboard2, [4, 5]);
    newPlayer1.makeAttack(newGameboard2, [4, 6]);
    const attacks = [
      [4, 3],
      [4, 4],
      [4, 5],
      [4, 6],
    ];
    expect(newGameboard2.grid[4][3]).toBe('X');
    expect(newGameboard2.grid[4][4]).toBe('X');
    expect(newGameboard2.grid[4][5]).toBe('X');
    expect(newGameboard2.grid[4][6]).toBe('X');
    expect(newPlayer1.attacksMade).toEqual(attacks);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/player.test.js,1
"when username is a valid string, but no username is passed
sends Authorization header
","
      needle.get('localhost:' + port, opts, function(err, resp) {
        var sent_headers = resp.body.headers;
        Object.keys(sent_headers).should.containEql('authorization');
        done();
      })
    
",YannickLeRoux/tdd-katas-typescript,https://github.com/YannickLeRoux/tdd-katas-typescript/blob/master/arrays/rotate-left/node_modules/fsevents/node_modules/needle/test/basic_auth_spec.js,1
"with stream option enabled
removes multiple state when encountering a reset
","
            const text = ['\x1b[1mthis \x1b[9mis bold\x1b[0m, but this isn\'t', ' nor is this'];
            const result = '<b>this <strike>is bold</strike></b>, but this isn\'t nor is this';

            return test(text, result, done, {stream: true});
        
",SidiOuld/Testing-With-Jest,https://github.com/SidiOuld/Testing-With-Jest/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,1
"CSSStyleDeclaration
setting improper css to csstext should not throw
","
    var style = new CSSStyleDeclaration();
    style.cssText = 'color: ';
    expect(style.cssText).toEqual('');
    style.color = 'black';
    style.cssText = 'float: ';
    expect(style.cssText).toEqual('');
  
",ramyaAK06/Frisby-jest-apiTest,https://github.com/ramyaAK06/Frisby-jest-apiTest/blob/master/node_modules/cssstyle/lib/CSSStyleDeclaration.test.js,1
"(EnzymeSelector)
passes negated when the actual does not match the expected
","
      expect(wrapper.find('#root')).to.not.match('MyComponent')
      expect(wrapper.find('#root')).to.not.match(MyComponent)
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/match.test.js,1
"nonNegativeInteger
passes on positive numbers
","
    assertPasses(_.nonNegativeInteger, /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: 1
    }), 'a');
    assertPasses(_.nonNegativeInteger, /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: 42
    }), 'a');
  
",Sunnypahuja/jest-enzyme,https://github.com/Sunnypahuja/jest-enzyme/blob/master/node_modules/airbnb-prop-types/build-test/nonNegativeInteger.js,1
"subnet() method with mask length 32
should compute ipv4 network's last address
","
      assert.equal(ipv4Subnet.lastAddress, '192.168.1.134');
    
",szymonlankauf/Vue-jest,https://github.com/szymonlankauf/Vue-jest/blob/master/node_modules/ip/test/api-test.js,1
"(node)
passes negated when the actual does not match the expected
","
      expect(wrapper).to.not.contain(<User index={4} />)
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/contain.test.js,1
"HAS_BOOLEAN_VALUE attrs
converts values to empty strings
","
        expect(wrapper.find('video')).to.have.attr('itemscope', '')
        expect(wrapper.find('video')).to.have.attr('allowfullscreen', '')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,1
"Uri
should fail on invalid host header
","

        var req = {
            method: 'GET',
            url: '/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ',
            headers: {
                host: 'example.com:something'
            }
        };

        Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {

            expect(err).to.exist();
            expect(err.output.payload.message).to.equal('Invalid Host header');
            done();
        });
    
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/hawk/test/uri.js,1
"span
appends the next row to the end of the prior row if it fits
","
      var ui = cliui({
        width: 40
      })

      ui.span(
        {text: 'i am a string that will be wrapped', width: 30}
      )

      ui.div(
        {text: ' [required] [default: 99]', align: 'right'}
      )

      var expected = [
       'i am a string that will be',
       'wrapped         [required] [default: 99]'
      ]

      ui.toString().split('\n').should.eql(expected)
    
",dineshselvantdm/twitter-web-app,https://github.com/dineshselvantdm/twitter-web-app/blob/master/node_modules/cliui/test/cliui.js,1
"#set
should set cookie
","
            // short
            biskviit.set('theme=plain', 'https://foo.com/');
            // long
            biskviit.set('SSID=Ap4P….GTEq; Domain=foo.com; Path=/test; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly', 'https://foo.com/');
            // subdomains
            biskviit.set('SSID=Ap4P….GTEq; Domain=.foo.com; Path=/; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly', 'https://www.foo.com/');
            // invalid cors
            biskviit.set('invalid_1=cors; domain=example.com', 'https://foo.com/');
            biskviit.set('invalid_2=cors; domain=www.foo.com', 'https://foo.com/');
            // invalid date
            biskviit.set('invalid_3=date; Expires=zzzz', 'https://foo.com/');

            // should not be added
            biskviit.set('expired_1=date; Expires=1999-01-01 01:01:01 GMT', 'https://foo.com/');

            expect(biskviit.cookies.map(function(cookie) {
                delete cookie.expires;
                return cookie;
            })).to.deep.equal([{
                name: 'theme',
                value: 'plain',
                domain: 'foo.com',
                path: '/'
            }, {
                name: 'ssid',
                value: 'Ap4P….GTEq',
                domain: 'foo.com',
                path: '/test',
                secure: true,
                httponly: true
            }, {
                name: 'ssid',
                value: 'Ap4P….GTEq',
                domain: 'www.foo.com',
                path: '/',
                secure: true,
                httponly: true
            }, {
                name: 'invalid_1',
                value: 'cors',
                domain: 'foo.com',
                path: '/'
            }, {
                name: 'invalid_2',
                value: 'cors',
                domain: 'foo.com',
                path: '/'
            }, {
                name: 'invalid_3',
                value: 'date',
                domain: 'foo.com',
                path: '/'
            }]);
        
",gabbotta/jest,https://github.com/gabbotta/jest/blob/master/node_modules/biskviit/test/biskviit-test.js,1
"onLinksUpdated function
should not pass when source and target diamond ports are both in ports
","
      jest.useFakeTimers();
      const { component } = setup(false, false);
      const { showWarning, updateLoading } = component.props();
      const instance = component.dive().instance();
      const sourcePort = new DiamondPortModel('top', true, '');
      const targetPort = new DiamondPortModel('left', true, '');
      instance.onLinksUpdated({
        link: { sourcePort, targetPort }
      });
      expect(showWarning).toHaveBeenCalledTimes(1);
      expect(updateLoading).toHaveBeenCalledWith(false);
      expect(setTimeout).not.toHaveBeenCalled();
    
",Sean2108/LATTE,https://github.com/Sean2108/LATTE/blob/master/test/components/BuildDiagram.spec.js,1
"host can be a dynamic function
can proxy with session value
","
    request(app)
      .get('/proxy/' + firstPort)
      .expect(204)
      .end(function(err) {
        if (err) {
          return done(err);
        }
        request(app)
            .get('/proxy/' + secondPort)
            .expect(200, done);
      });
  
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/express-http-proxy/test/path.js,-
"initialThis
should be cloned as a new object
","
      const NewComponent = withThis(initialThis)(BaseComponent);
      mount(<NewComponent />);
      const props = BaseComponent.mock.calls[0][0];
      expect(props.self).not.toBe(initialThis);
    

      const props = BaseComponent.mock.calls[0][0];
      expect(props).toEqual({ self: initialThis });
    
",Stupidism/stupid-rc-starter,https://github.com/Stupidism/stupid-rc-starter/blob/master/src/hocs/__tests__/withThis.test.js,-
"redux properties
has access to `success` piece of state
","
      const success = true;
      const wrapper = setup({success});
      const successProp = wrapper.instance().props.success;
      expect(successProp).toBe(success);
    
",deepbsd/jestclass,https://github.com/deepbsd/jestclass/blob/master/jotto/src/App.test.js,1
"Logger
should log an Info Message
","
            var flow = [{id: ""n1"", type: ""function"", wires: [[""n2""]], func: ""node.log('test');""}];
            helper.load(functionNode, flow, function () {
                var n1 = helper.getNode(""n1"");
                n1.receive({payload: ""foo"", topic: ""bar""});
                try {
                    helper.log().called.should.be.true();
                    var logEvents = helper.log().args.filter(function (evt) {
                        return evt[0].type == ""function"";
                    });
                    logEvents.should.have.length(1);
                    var msg = logEvents[0][0];
                    msg.should.have.property('level', helper.log().INFO);
                    msg.should.have.property('id', 'n1');
                    msg.should.have.property('type', 'function');
                    msg.should.have.property('msg', 'test');
                    done();
                } catch (err) {
                    done(err);
                }
            });
        
",crudaz/mongodb-testing,https://github.com/crudaz/mongodb-testing/blob/master/node_modules/node-red-node-test-helper/examples/function_spec.js,1
"Hawk
generates a header then successfully parses and validates payload
","

        var req = {
            method: 'GET',
            url: '/resource/4?filter=a',
            host: 'example.com',
            port: 8080
        };

        credentialsFunc('123456', function (err, credentials1) {

            req.authorization = Hawk.client.header('http://example.com:8080/resource/4?filter=a', req.method, { credentials: credentials1, payload: 'hola!', ext: 'some-app-data' }).field;
            Hawk.server.authenticate(req, credentialsFunc, { payload: 'hola!' }, function (err, credentials2, artifacts) {

                expect(err).to.not.exist();
                expect(credentials2.user).to.equal('steve');
                expect(artifacts.ext).to.equal('some-app-data');
                done();
            });
        });
    
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/fsevents/node_modules/hawk/test/index.js,1
"Plus Minus
should return [""0.0000000"", ""0.000000"", ""1.000000""] when arr is [0,0,0,0]
","
    expect(plusMinus([0, 0, 0, 0])).toEqual(['0.000000', '0.000000', '1.000000']);
  
",YannickLeRoux/tdd-katas-typescript,https://github.com/YannickLeRoux/tdd-katas-typescript/blob/master/plus-minus/src/plus-minus.test.js,1
"css-select-base-adapter
getAttributeValue
","
    assert( container )
  
",SidiOuld/Testing-With-Jest,https://github.com/SidiOuld/Testing-With-Jest/blob/master/node_modules/css-select-base-adapter/test/index.js,-
"Uri
should fail on invalid bewit structure
","

        var req = {
            method: 'GET',
            url: '/resource/4?bewit=abc',
            host: 'example.com',
            port: 8080
        };

        Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {

            expect(err).to.exist();
            expect(err.output.payload.message).to.equal('Invalid bewit structure');
            done();
        });
    
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/fsevents/node_modules/hawk/test/uri.js,1
"Player: madeAttack() (Player makes attack to grid) 
Player 1 makes an attack successfully to grid #1
","
    const newPlayer1 = Player(0, 'human', 'default', 'blue');
    const newGameboard2 = Gameboard(0, 8);
    newPlayer1.makeAttack(newGameboard2, [0, 0]);
    expect(newGameboard2.grid[0][0]).toBe('X');
    expect(newPlayer1.attacksMade).toEqual([[0, 0]]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/player.test.js,-
"([ key, key, key... ])
passes negated when the actual does not match the expected
","
      expect(wrapper.find(User).first()).to.not.have.props([ 'invalid' ])
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/props.test.js,-
"Testing Unit
Pi
","
	 assert.equal(a.eval(""Pi1,5,n""),""120"");
  
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/math-expression-evaluator/test/index.js,-
"authenticate()
parses a valid authentication header (host override)
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                headers: {
                    host: 'example1.com:8080',
                    authorization: 'Hawk id=""1"", ts=""1353788437"", nonce=""k3j4h2"", mac=""zy79QQ5/EYFmQqutVnYb73gAc/U="", ext=""hello""'
                }
            };

            Hawk.server.authenticate(req, credentialsFunc, { host: 'example.com', localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.not.exist();
                expect(credentials.user).to.equal('steve');
                done();
            });
        
",tmtarpinian/jest_introduction,https://github.com/tmtarpinian/jest_introduction/blob/master/node_modules/hawk/test/server.js,1
"tarball.pipe(unpack(directory, callback))
unpacks the tarball into the directory
","
    read(__dirname + '/fixtures/packed.tar').pipe(tar.unpack(__dirname + '/output/unpacked', function (err) {
      if (err) return done(err)
      assert.equal(rfile('./output/unpacked/bar.txt'), rfile('./fixtures/to-pack/bar.txt'))
      assert.equal(rfile('./output/unpacked/foo.txt'), rfile('./fixtures/to-pack/foo.txt'))
      done()
    }))
  
",Sstobo/Jest-Testing,https://github.com/Sstobo/Jest-Testing/blob/master/node_modules/fsevents/node_modules/tar-pack/test/index.js,1
"escapeHtml()
encodes large unicode characters
","

        var encoded = Hoek.escapeHtml(String.fromCharCode(500) + String.fromCharCode(1000));
        expect(encoded).to.equal('&#500;&#1000;');
        done();
    
",sethcarrino/redux-jest-testing,https://github.com/sethcarrino/redux-jest-testing/blob/master/node_modules/fsevents/node_modules/hoek/test/escaper.js,1
"subnet() method with mask length 32
should compute ipv4 network's first address
","
      assert.equal(ipv4Subnet.firstAddress, '192.168.1.134');
    
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/ip/test/api-test.js,1
"redux properties
has access to `success` state
","
    const success = true;
    const wrapper = setup({ success });
    const successProp = wrapper.instance().props.success;
    expect(successProp).toBe(success);
  
",alexsjcho/jotto-react-jest-enyzme-testing,https://github.com/alexsjcho/jotto-react-jest-enyzme-testing/blob/master/src/App.test.js,1
"authenticate()
errors on an invalid authentication header: wrong scheme
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Basic asdasdasdasd'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.not.exist();
                done();
            });
        
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,1
"glob-parent
should strip glob magic to return parent path
","
    assert.equal(gp('path/to/*.js'), 'path/to');
    assert.equal(gp('/root/path/to/*.js'), '/root/path/to');
    assert.equal(gp('/*.js'), '/');
    assert.equal(gp('*.js'), '.');
    assert.equal(gp('**/*.js'), '.');
    assert.equal(gp('path/{to,from}'), 'path');
    assert.equal(gp('path/!(to|from)'), 'path');
    assert.equal(gp('path/?(to|from)'), 'path');
    assert.equal(gp('path/+(to|from)'), 'path');
    assert.equal(gp('path/*(to|from)'), 'path');
    assert.equal(gp('path/@(to|from)'), 'path');
    assert.equal(gp('path/**/*'), 'path');
    assert.equal(gp('path/**/subdir/foo.*'), 'path');
  
",Osman190/simple-jest-test-example,https://github.com/Osman190/simple-jest-test-example/blob/master/node_modules/glob-parent/test.js,1
"getElementTop
should get the absolute position from the scrolling element
","
    const result = getElementTop(h1);
    expect(result).toBe(0);
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/utils/tests/getElementTop.test.js,1
"onLinksUpdated function
should not pass when source default and target diamond ports are both out ports
","
      jest.useFakeTimers();
      const { component } = setup(false, false);
      const { showWarning, updateLoading } = component.props();
      const instance = component.dive().instance();
      const sourcePort = new DefaultDataPortModel(false, '');
      const targetPort = new DiamondPortModel('top', false, '');
      instance.onLinksUpdated({
        link: { sourcePort, targetPort }
      });
      expect(showWarning).toHaveBeenCalledTimes(1);
      expect(updateLoading).toHaveBeenCalledWith(false);
      expect(setTimeout).not.toHaveBeenCalled();
    
",Sean2108/LATTE,https://github.com/Sean2108/LATTE/blob/master/test/components/BuildDiagram.spec.js,1
"(name)
passes when the actual matches the expected
","
      expect(wrapper).to.have.style('border')
      expect(wrapper.find('span')).to.have.style('color')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/style.test.js,-
"
.find - bring together all query params into a jsdom query 
","
  Dom
    .find(""stuff"", { getByText: jest.fn() })
    .then(done)

",axehomeyg/jest-marmot,https://github.com/axehomeyg/jest-marmot/blob/master/__tests__/marmot/dom.test.js,-
"alignment
allows a column to be center aligned
","
      var ui = cliui({
        width: 60
      })

      ui.div(
        'i am a string',
        {text: 'i am a second string', align: 'center', padding: [0, 2, 0, 2]},
        'i am a third string that should be wrapped'
      )

      // it should right-align the second column.
      var expected = [
       'i am a string          i am a second       i am a third string',
       '                           string          that should be',
       '                                           wrapped'
      ]

      ui.toString().split('\n').should.eql(expected)
    
",tupizz/playground-integrated-tests,https://github.com/tupizz/playground-integrated-tests/blob/master/node_modules/cliui/test/cliui.js,1
"Player: madeAttack() (Player makes attack to grid) 
Player 1 makes an attack successfully to grid #2
","
    const newPlayer1 = Player(0, 'human', 'default', 'blue');
    const newGameboard2 = Gameboard(0, 8);
    newPlayer1.makeAttack(newGameboard2, [3, 6]);
    expect(newGameboard2.grid[3][6]).toBe('X');
    expect(newPlayer1.attacksMade).toEqual([[3, 6]]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/player.test.js,1
"message()
errors on invalid port
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            };

            var auth = Hawk.client.message('example.com', '80', 'I am the boodyman', { credentials: credentials, timestamp: 1353809207, nonce: 'abc123' });
            expect(auth).to.not.exist();
            done();
        
",yashnerella/reactJs-basicsJest,https://github.com/yashnerella/reactJs-basicsJest/blob/master/node_modules/hawk/test/client.js,-
"Plus Minus
should return [""0.500000"",""0.333333"",""0.166667""] when arr is [-4, 3, -9, 0, 4, 1]
","
    expect(plusMinus([-4, 3, -9, 0, 4, 1])).toEqual(['0.500000','0.333333','0.166667']);
  
",YannickLeRoux/tdd-katas-typescript,https://github.com/YannickLeRoux/tdd-katas-typescript/blob/master/plus-minus/src/plus-minus.test.js,-
"ComputerAI: performAIAttack() (Perform the correct attack type choices)
AI will perform random, search and alignment attacks until ship has sunk
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const newShip = Ship(0, 4, [], false, 'vertical');
    newGameboardPlayer.placeShip(newShip, [3, 3]);
    const computerAI = ComputerAI(0);
    let shipFound = false;
    const checkBoard = () => {
      for (let i = 0; i < size; i += 1) {
        for (let j = 0; j < size; j += 1) {
          if (newGameboardPlayer.grid[i][j] === 'H') {
            return true;
          }
        }
      }
      return false;
    };
    while (shipFound === false) {
      computerAI.performAIAttack(newGameboardPlayer);
      shipFound = checkBoard();
    }
    while (newGameboardPlayer.grid[3][3] !== 'S') {
      computerAI.performAIAttack(newGameboardPlayer);
    }
    expect(newGameboardPlayer.grid[3][3]).toBe('S');
    expect(newGameboardPlayer.allShipsSunk()).toEqual(true);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,1
"_columnWidths
divides width over remaining columns if middle column has width specified
","
      var ui = cliui({
          width: 40
        }),
        widths = ui._columnWidths([{}, {width: 10}, {}])

      widths[0].should.equal(15)
      widths[1].should.equal(10)
      widths[2].should.equal(15)
    
",dineshselvantdm/twitter-web-app,https://github.com/dineshselvantdm/twitter-web-app/blob/master/node_modules/cliui/test/cliui.js,1
"subnet() method
should compute ipv4 network's first address
","
      assert.equal(ipv4Subnet.firstAddress, '192.168.1.129');
    
",lammypham/front-end-testing,https://github.com/lammypham/front-end-testing/blob/master/node_modules/ip/test/api-test.js,0
"when username AND password are non empty strings
Basic Auth only includes both user and password
","
      needle.get('localhost:' + port, opts, function(err, resp) {
        var sent_headers = resp.body.headers;
        var auth = get_auth(sent_headers['authorization']);
        auth[0].should.equal('foobar');
        auth[1].should.equal('jakub');
        auth.should.have.lengthOf(2);
        done();
      })
    
",ben-ghirardani/React-Webpack-Babel-Jest-Start-Point,https://github.com/ben-ghirardani/React-Webpack-Babel-Jest-Start-Point/blob/master/node_modules/fsevents/node_modules/needle/test/basic_auth_spec.js,-
"ComputerAI: getAlignmentAttack (Get the correct positions of the end points of ship parts discovered)
Attack is made south/bottom of the ship when ship starts on the boundary
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[0][3] = 'H';
    newGameboardPlayer.grid[1][3] = 'H';
    newGameboardPlayer.grid[2][3] = 'H';
    const alignmentObj = computerAI.getAlignment(newGameboardPlayer);
    const alignmentCoords = computerAI.getAlignmentAttack(
      newGameboardPlayer,
      alignmentObj[0],
      alignmentObj[1],
      alignmentObj[2],
    );
    expect(alignmentCoords).toStrictEqual([3, 3]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,-
"header()
errors on invalid uri
","

            var header = Hawk.client.header(4, 'POST');
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid argument type');
            done();
        
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/hawk/test/client.js,0
"escape()
Should wrap values with spaces in double quotes
","
            assert.equal(escape('asd abc'), '""asd abc""');
        
",MaxKoldun/Task-10-Tetsing,https://github.com/MaxKoldun/Task-10-Tetsing/blob/master/node_modules/coa/test/shell-test.js,-
"error
renders as expected
","
    cy.visit(""/should-not-exist"", { failOnStatusCode: false });
    cy.injectAxe();

    // Ensure the appropriate status code
    cy.request({
      failOnStatusCode: false,
      timeout: 500,
      url: ""/should-not-exist"",
    }).then((response) => {
      expect(response.status).to.eq(404);
    });

    // Ensure expected links are all present
    links.forEach(({ href, name }) => {
      cy.findByRole(""link"", { name })
        .should(""have.attr"", ""href"", href)
        .and(""be.visible"");
    });

    cy.checkA11y();
    cy.percySnapshot(""error page renders as expected"");
  
",ismay/superwolff,https://github.com/ismay/superwolff/blob/master/.cypress/integration/error.test.js,-
"regular attrs
passes when attribute exists with a falsey (but not false/null/undefined) value
","
        expect(wrapper.find('audio')).to.have.attr('name')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,-
"when username is a valid string, and password is null
Basic Auth only includes both username and password
","
      needle.get('localhost:' + port, opts, function(err, resp) {
        var sent_headers = resp.body.headers;
        var auth = get_auth(sent_headers['authorization']);
        auth[0].should.equal('foobar');
        auth[1].should.equal('');
        done();
      })
    
",gtwright/with-jest,https://github.com/gtwright/with-jest/blob/master/node_modules/needle/test/basic_auth_spec.js,0
"the ""makeAppear"" property
should accept boolean ""true"" as value
","
      const renderedComponent = shallow(<SpeechBubble makeAppear />);
      expect(toJson(renderedComponent)).toMatchSnapshot();
    
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/components/SpeechBubble/tests/index.test.js,-
"getContent Saga
should call the contentLoadingError action if the response errors
","
    getContentGenerator = getContent();

    const selectDescriptor = getContentGenerator.next().value;
    expect(selectDescriptor).toMatchSnapshot();

    const callDescriptor = getContentGenerator.next(locale).value;
    expect(callDescriptor).toMatchSnapshot();
  

    const response = new Error('Some error');
    const putDescriptor = getContentGenerator.throw(response).value;
    expect(putDescriptor).toEqual(put(contentLoadingError(response)));
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/containers/AboutPage/tests/saga.test.js,-
"Gameboard: receiveAttack() (Check if attack is valid)
Ship with 4 length is sunk after 4 attacks received
","
    const newGameboard = Gameboard(0, 8);
    const newShip = Ship(0, 4, [], false, 'horizontal');
    newGameboard.placeShip(newShip, [1, 3]);
    newGameboard.receiveAttack([1, 3]);
    newGameboard.receiveAttack([1, 4]);
    newGameboard.receiveAttack([1, 5]);
    newGameboard.receiveAttack([1, 6]);
    expect(newShip.isSunk()).toBe(true);
    expect(newGameboard.grid[1][3]).toBe('S');
    expect(newGameboard.grid[1][4]).toBe('S');
    expect(newGameboard.grid[1][5]).toBe('S');
    expect(newGameboard.grid[1][6]).toBe('S');
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/gameboard.test.js,1
"Asincrono - Promise(resolve, reject)
Promise - Promise(resolve, reject)
","
    const url = 'https://my-json-server.typicode.com/typicode/demo/posts';
    axiosGet(url).then((datos) => {
      const data = {
        id: 1,
        title: 'Post 1',
      };
      expect(datos.length).toBeGreaterThanOrEqual(1);
      expect(datos[0].id).toBeGreaterThanOrEqual(1);
      expect(datos[0]).toEqual(data);
      done();
    });
  
",joseluisgs/testing-js-jest,https://github.com/joseluisgs/testing-js-jest/blob/master/tests/asincrono.spec.js,0
"app
works
","
    cy.visit('/')
      .findByText(/terms/i)
      .click()
      .findByText(/lorem ipsizzle/i)
  
",parmsang/gatsby-starter-ecommerce,https://github.com/parmsang/gatsby-starter-ecommerce/blob/master/cypress/e2e/smoke.js,0
"preserve tokens
should (e.g. shouldn't, but will) mangle tokens in the given string
","
    var html = pretty('<ul><li><%= name %></li></ul>');
    html.should.equal('<ul>\n  <li>\n    <%=n ame %>\n  </li>\n</ul>');
  
",j0s3b0/jest,https://github.com/j0s3b0/jest/blob/master/node_modules/preserve/test.js,-
"cidrSubnet() method
should compute an ipv4 network's first address
","
      assert.equal(ipv4Subnet.firstAddress, '192.168.1.129');
    
",szymonlankauf/Vue-jest,https://github.com/szymonlankauf/Vue-jest/blob/master/node_modules/ip/test/api-test.js,0
"header()
returns a valid authorization header (sha256)
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            };

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', { credentials: credentials, ext: 'Bazinga!', timestamp: 1353809207, nonce: 'Ygvqdz', payload: 'something to write about', contentType: 'text/plain' }).field;
            expect(header).to.equal('Hawk id=""123456"", ts=""1353809207"", nonce=""Ygvqdz"", hash=""2QfCt3GuY9HQnHWyWD3wX68ZOKbynqlfYmuO2ZBRqtY="", ext=""Bazinga!"", mac=""q1CwFoSHzPZSkbIvl0oYlD+91rBUEvFk763nMjMndj8=""');
            done();
        
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/hawk/test/client.js,1
"authenticate()
errors on duplicated authorization attribute key
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123"", id=""456"", ts=""1353788437"", nonce=""k3j4h2"", mac=""/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos="", ext=""hello""'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Duplicate attribute: id');
                done();
            });
        
",Sstobo/Jest-Testing,https://github.com/Sstobo/Jest-Testing/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,-
"valueType
returns color for rgba(n, n, n, n)
","
    let input = 'rgba(10, 10, 10, 1)';
    let output = parsers.valueType(input);

    expect(output).toEqual(parsers.TYPES.COLOR);
  
",rainstr7/testJest,https://github.com/rainstr7/testJest/blob/master/node_modules/cssstyle/lib/parsers.test.js,-
"
works just fine
","
  expect(1).toBe(1);

",git-palace/jest,https://github.com/git-palace/jest/blob/master/integration_tests/verbose_reporter/__tests__/verbose-test.js,0
"Resetting timer
it stops timer when game is won and resets when new game is started
","
      cy.setBoard(foundations).then(() => {
        cy.get('[data-test=""card-Q♠""]').clickTo('[data-test=""foundation-3""]');
        cy.get('[data-test=""card-K♠""]').clickTo('[data-test=""foundation-3""]');

        cy.get('[data-test=""timer""]').then(($timerStart) => {
          const startNumber = $timerStart.text();

          // eslint-disable-next-line cypress/no-unnecessary-waiting
          cy.wait(2000);

          cy.get('[data-test=""timer""]').then(($timerPaused) => {
            const pausedNumber = $timerPaused.text();

            expect(startNumber).to.equal(pausedNumber);
          });

          cy.get('[data-test=""game-overlay-btns""]').within(() => {
            cy.get('[data-test=""new-game-btn""]').click();
          });

          cy.get('[data-test=""timer""]').should('contain', '0:00:00');
        });
      });
    
",TimMansell/vue-solitaire,https://github.com/TimMansell/vue-solitaire/blob/master/tests/e2e/specs/timer.spec.js,-
"(name, value)
fails when the actual does not match the expected
","
      expect(() => {
        expect(wrapper).to.have.style('color', 'red')
      }).to.throw(""to have a 'color' CSS style property"")

      expect(() => {
        expect(wrapper.find('span')).to.have.style('border', '2px')
      }).to.throw(""to have a 'border' CSS style property"")

      expect(() => {
        expect(wrapper).to.not.have.style('border', '1px')
      }).to.throw(""not to have a 'border' CSS style property"")

      expect(() => {
        expect(wrapper.find('span')).to.not.have.style('color', 'red')
      }).to.throw(""not to have a 'color' CSS style property"")

      expect(() => {
        expect(wrapper).to.have.style('color', undefined)
      }).to.throw(""to have a 'color' CSS style property"")
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/style.test.js,0
"moxios tests
calls the getSecretWord callback on axios response
","
    moxios.install();
  

    const secretWord = 'party';

    // handle any axios calls that occur during the test
    moxios.wait(() => {
      const request = moxios.requests.mostRecent();
      // this response is equivalent to what we'd get from the random word server
      request.respondWith({
        status: 200,
        response: secretWord,
      });
    });

    // mock setSecretWord, call getSecretWord with the mock, & make sure mock was called with the response from moxios
    const mockSetSecretWord = jest.fn();
    await getSecretWord(mockSetSecretWord); // this makes an axios call which will be handled by moxios
    // see whether mock was run with the correct argument
    expect(mockSetSecretWord).toHaveBeenCalledWith(secretWord);
  

    moxios.uninstall();
  
",lmackenzie94/react-testing-udemy,https://github.com/lmackenzie94/react-testing-udemy/blob/master/jotto/src/actions/hookActions.test.js,-
"ComputerAI: getAlignmentAttack (Get the correct positions of the end points of ship parts discovered)
Attack is made east/right of the ship when ship starts on the boundary
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[3][0] = 'H';
    newGameboardPlayer.grid[3][1] = 'H';
    newGameboardPlayer.grid[3][2] = 'H';
    newGameboardPlayer.grid[3][3] = 'H';
    const alignmentObj = computerAI.getAlignment(newGameboardPlayer);
    const alignmentCoords = computerAI.getAlignmentAttack(
      newGameboardPlayer,
      alignmentObj[0],
      alignmentObj[1],
      alignmentObj[2],
    );
    expect(alignmentCoords).toStrictEqual([3, 4]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,1
"comment Node
should be loaded
","
        var flow = [{id:""n1"", type:""comment"", name: ""comment"" }];
        helper.load(commentNode, flow, function() {
            var n1 = helper.getNode(""n1"");
            n1.should.have.property('name', 'comment');
            done();
        });
    

        helper.unload();
    
",crudaz/mongodb-testing,https://github.com/crudaz/mongodb-testing/blob/master/node_modules/node-red-node-test-helper/examples/comment_spec.js,0
"integer
passes on nil values
","
    assertPasses((0, _.integer)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: undefined
    }), 'a');
    assertPasses((0, _.integer)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: null
    }), 'a');
  
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/airbnb-prop-types/build-test/integer.js,-
"get time button
should call getCurrentTime action creator when button is clicked
","
            const {getByTestId, queryByTestId} = app;

            const getTimeButton = getByTestId('getTime');

            fireEvent.press(getTimeButton);

            await wait(() => expect(queryByTestId('time')).toBeTruthy());
            await wait(() => expect(getByTestId('time').props.children).toEqual('Current Time: ' + newTime));
        
",hoff2-ACN/jest-vs-rtl,https://github.com/hoff2-ACN/jest-vs-rtl/blob/master/App.test.js,1
"the ""makeAppear"" property
should accept boolean ""false"" as value
","
      const renderedComponent = shallow(<SpeechBubble makeAppear={false} />);
      expect(toJson(renderedComponent)).toMatchSnapshot();
    
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/components/SpeechBubble/tests/index.test.js,-
"stringify()
omits array indices when asked
","
        expect(Qs.stringify({ a: ['b', 'c', 'd'] }, { indices: false })).to.equal('a=b&a=c&a=d');
        done();
    }
",Moverr/jestcodecov,https://github.com/Moverr/jestcodecov/blob/master/bluh/node_modules/react-project/node_modules/qs/test/stringify.js,-
"regular attrs
converts values to strings
","
        expect(wrapper.find('audio')).to.have.attr('contenteditable', 'false')
        expect(wrapper.find('audio')).to.have.attr('rel', 'magic')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,0
"stream_length set to invalid value
doesnt work if Transfer-Encoding is not set
","
      send_request({ stream_length: 5 }, function(err, resp) {
        err.code.should.eql('ECONNRESET');
        done()
      })
    
",crudaz/mongodb-testing,https://github.com/crudaz/mongodb-testing/blob/master/node_modules/fsevents/node_modules/needle/test/request_stream_spec.js,-
"AsyncFactory
Should successfully use a middleware function to create an arbitrary object
","
		const result = await global.page.evaluate(async () => {
			const testName = 'test'
			const testData = { foo: 'bar' }

			const objFactory = Game.createAsyncFactory()
				.use(async (name, data) => ({ value: data.foo }))
				.set(testName, async (name, data) => ({
					namesMatch: testName === name,
					dataMatches: data.value === testData.foo,
				}))

			return await objFactory.create(testName, testData)
		})
		expect(result).toEqual({
			namesMatch: true,
			dataMatches: true,
		})
	
",bcdewitt/js-game-engine,https://github.com/bcdewitt/js-game-engine/blob/master/test/tests/asyncFactory.test.js,1
"Uri
should fail on missing bewit
","

        var req = {
            method: 'GET',
            url: '/resource/4',
            host: 'example.com',
            port: 8080
        };

        Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {

            expect(err).to.exist();
            expect(err.output.payload.message).to.not.exist();
            expect(err.isMissing).to.equal(true);
            done();
        });
    
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/fsevents/node_modules/hawk/test/uri.js,-
"authenticateMessage()
should fail authorization on invalid credentials
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                expect(auth).to.exist();

                var errFunc = function (id, callback) {

                    callback(null, {});
                };

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Invalid credentials');
                    done();
                });
            });
        
",Sstobo/Jest-Testing,https://github.com/Sstobo/Jest-Testing/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,0
"when username is a valid string, and password is an empty string
Basic Auth only includes both username and password
","
      needle.get('localhost:' + port, opts, function(err, resp) {
        var sent_headers = resp.body.headers;
        var auth = get_auth(sent_headers['authorization']);
        auth[0].should.equal('foobar');
        auth[1].should.equal('');
        auth.should.have.lengthOf(2);
        done();
      })
    
",Robbiekruszynski/ticket-JEST,https://github.com/Robbiekruszynski/ticket-JEST/blob/master/node_modules/fsevents/node_modules/needle/test/basic_auth_spec.js,1
"misc
encodes special characters
","
            ReactDOM.render(
                <Helmet
                    meta={[
                        {
                            name: ""description"",
                            content: 'This is ""quoted"" text and & and \'.'
                        }
                    ]}
                />,
                container
            );

            requestAnimationFrame(() => {
                const existingTags = headElement.querySelectorAll(
                    `meta[${HELMET_ATTRIBUTE}]`
                );
                const existingTag = existingTags[0];

                expect(existingTags).to.not.equal(undefined);

                expect(existingTags.length).to.be.equal(1);

                expect(existingTags).to.have.deep
                    .property(""[0]"")
                    .that.is.an.instanceof(Element);
                expect(existingTag).to.have.property(""getAttribute"");
                expect(existingTag.getAttribute(""name"")).to.equal(
                    ""description""
                );
                expect(existingTag.getAttribute(""content"")).to.equal(
                    'This is ""quoted"" text and & and \'.'
                );
                expect(existingTag.outerHTML).to.equal(
                    `<meta name=""description"" content=""This is &quot;quoted&quot; text and &amp; and '."" ${HELMET_ATTRIBUTE}=""true"">`
                );

                done();
            });
        
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/react-helmet/test/HelmetTest.js,-
"Uri
should fail on empty bewit attribute
","

        var req = {
            method: 'GET',
            url: '/resource/4?bewit=YVxcY1xk',
            host: 'example.com',
            port: 8080
        };

        Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {

            expect(err).to.exist();
            expect(err.output.payload.message).to.equal('Missing bewit attributes');
            done();
        });
    
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/fsevents/node_modules/hawk/test/uri.js,0
"Package
should follow dependencies
","
    let matchedDependency;
    cy.visit(VISIT_URL); // direct visit
    cy.getByTestId(""dependencies-tab"")
      .getByText(/Dependencies \(/)
      .click(); // open tab
    cy.getByTestId(""dependencies-tab"")
      .find(""a:first"")
      .then(el => {
        matchedDependency = Cypress.$(el).text();
        return el;
      })
      .click() // click on first dependency
      .then(() => cy.url().should(""contain"", `/package/${matchedDependency}@`));
  
",topheman/npm-registry-browser,https://github.com/topheman/npm-registry-browser/blob/master/cypress/integration/package.spec.js,0
"getSecretWord calls
getSecretWord does not run on App update
","
    const wrapper = setup();
    mockGetSecretWord.mockClear(); // need this otherwise Enzyme will remember the call in the test above (on mount)
    wrapper.update(); // triggers a component update
    expect(mockGetSecretWord).not.toHaveBeenCalled();
  
",lmackenzie94/react-testing-udemy,https://github.com/lmackenzie94/react-testing-udemy/blob/master/jotto/src/App.test.js,1
"constructed with no options
doesn't modify the input string
","
            const text = 'some text';
            const result = 'some text';

            return test(text, result, done);
        
",defikabulan/keranjang-ppl,https://github.com/defikabulan/keranjang-ppl/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,0
"applyPluginsParallelBailResult
should save valid results
","
		var tapable = new Tapable();
		var log = [];
		var p1 = makeTestPlugin(log, 1);
		var p2 = makeTestPlugin(log, 2);
		var p3 = makeTestPlugin(log, 3);
		tapable.plugin(""test"", p1);
		tapable.plugin(""test"", p2);
		tapable.plugin(""test"", p3);
		var result = makeTestPlugin(log, 0);
		tapable.applyPluginsParallelBailResult(""test"", ""a"", result);
		p3.issue(null, ""fail"");
		p2.issue(null, ""ok"");
		p1.issue();
		log.should.be.eql([
			[1, ""a""],
			[2, ""a""],
			[3, ""a""],
			[0, null, ""ok""],
		]);
	
",nialloc9/reactReduxJestBoilerplate,https://github.com/nialloc9/reactReduxJestBoilerplate/blob/master/node_modules/tapable/test/applyPluginsParallelBailResultTest.js,-
"header()
returns a valid authorization header (sha1)
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            };

            var header = Hawk.client.header('http://example.net/somewhere/over/the/rainbow', 'POST', { credentials: credentials, ext: 'Bazinga!', timestamp: 1353809207, nonce: 'Ygvqdz', payload: 'something to write about' }).field;
            expect(header).to.equal('Hawk id=""123456"", ts=""1353809207"", nonce=""Ygvqdz"", hash=""bsvY3IfUllw6V5rvk4tStEvpBhE="", ext=""Bazinga!"", mac=""qbf1ZPG/r/e06F4ht+T77LXi5vw=""');
            done();
        
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/hawk/test/client.js,-
"css-select-base-adapter
findOne
","
    assert( container )
  
",defikabulan/keranjang-ppl,https://github.com/defikabulan/keranjang-ppl/blob/master/node_modules/css-select-base-adapter/test/index.js,0
"Uri
should fail on missing bewit id attribute
","

        var req = {
            method: 'GET',
            url: '/resource/4?bewit=XDQ1NTIxNDc2MjJcK0JFbFhQMXhuWjcvd1Nrbm1ldGhlZm5vUTNHVjZNSlFVRHk4NWpTZVJ4VT1cc29tZS1hcHAtZGF0YQ',
            host: 'example.com',
            port: 8080
        };

        Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {

            expect(err).to.exist();
            expect(err.output.payload.message).to.equal('Missing bewit attributes');
            done();
        });
    
",JamieDixon/jest-tester,https://github.com/JamieDixon/jest-tester/blob/master/webapp/node_modules/fsevents/node_modules/hawk/test/uri.js,-
"authenticate()
errors on an missing authorization header
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080
            };

            Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.isMissing).to.equal(true);
                done();
            });
        
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/hawk/test/server.js,-
"authenticate()
parses a valid authentication header (sha256)
","

            var req = {
                method: 'GET',
                url: '/resource/1?b=1&a=2',
                host: 'example.com',
                port: 8000,
                authorization: 'Hawk id=""dh37fgj492je"", ts=""1353832234"", nonce=""j4h3g2"", mac=""m8r1rHbXN6NgO+KIIhjO7sFRyd78RNGVUwehe8Cp2dU="", ext=""some-app-data""'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353832234000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.not.exist();
                expect(credentials.user).to.equal('steve');
                done();
            });
        
",yuanyu90221/jestSurvey,https://github.com/yuanyu90221/jestSurvey/blob/master/node_modules/hawk/test/server.js,1
"Hawk
generates a header then successfully parse it (absolute request uri)
","

        var req = {
            method: 'POST',
            url: 'http://example.com:8080/resource/4?filter=a',
            headers: {
                host: 'example.com:8080',
                'content-type': 'text/plain;x=y'
            }
        };

        var payload = 'some not so random text';

        credentialsFunc('123456', function (err, credentials1) {

            var reqHeader = Hawk.client.header('http://example.com:8080/resource/4?filter=a', req.method, { credentials: credentials1, ext: 'some-app-data', payload: payload, contentType: req.headers['content-type'] });
            req.headers.authorization = reqHeader.field;

            Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials2, artifacts) {

                expect(err).to.not.exist();
                expect(credentials2.user).to.equal('steve');
                expect(artifacts.ext).to.equal('some-app-data');
                expect(Hawk.server.authenticatePayload(payload, credentials2, artifacts, req.headers['content-type'])).to.equal(true);

                var res = {
                    headers: {
                        'content-type': 'text/plain'
                    }
                };

                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
                expect(res.headers['server-authorization']).to.exist();

                expect(Hawk.client.authenticate(res, credentials2, artifacts, { payload: 'some reply' })).to.equal(true);
                done();
            });
        });
    
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/fsevents/node_modules/hawk/test/index.js,-
"stream_length set to invalid value
doesnt work if Transfer-Encoding is set to a blank string
","
      send_request({ stream_length: 5, headers: { 'Transfer-Encoding': '' }}, function(err, resp) {
        err.code.should.eql('ECONNRESET');
        done()
      })
    
",devlinglasman/jest-testing,https://github.com/devlinglasman/jest-testing/blob/master/node_modules/fsevents/node_modules/needle/test/request_stream_spec.js,-
"([ key, key, key... ])
passes when the actual matches the expected
","
      expect(wrapper.find(User).first()).to.have.props([ 'index' ])
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/props.test.js,0
"DB service
formatError
","
    const result = formatError();

    expect(result).toEqual({
      error: true,
    });
  
",TimMansell/vue-solitaire,https://github.com/TimMansell/vue-solitaire/blob/master/src/services/db/__tests__/helpers.spec.js,0
"scoreLinkText(linkText)
penalizes -50 if pageNum is >= link text as num
","
    assert.equal(scoreLinkText('4', 5), -44);
  
",postlight/mercury-parser,https://github.com/postlight/mercury-parser/blob/master/src/extractors/generic/next-page-url/scoring/utils/score-link-text.test.js,0
".off()
should remove the given `listener` from `event`
","
      obj.on('foo', console.log).on('foo', console.dir)
        .off('foo', console.log)
        .listeners('foo')
        .should.not.include(console.log);
    
",gtwright/with-jest,https://github.com/gtwright/with-jest/blob/master/node_modules/emitter-mixin/test/person.js,1
".on()
should work
","
      obj.on('foo', console.log)
        ._events['foo'].should.equal(console.log)
    
",gtwright/with-jest,https://github.com/gtwright/with-jest/blob/master/node_modules/emitter-mixin/test/person.js,0
"getBewit()
returns a valid bewit value (parsed uri)
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            };

            var bewit = Hawk.uri.getBewit(Url.parse('https://example.com/somewhere/over/the/rainbow'), { credentials: credentials, ttlSec: 300, localtimeOffsetMsec: 1356420407232 - Hawk.utils.now(), ext: 'xandyandz' });
            expect(bewit).to.equal('MTIzNDU2XDEzNTY0MjA3MDdca3NjeHdOUjJ0SnBQMVQxekRMTlBiQjVVaUtJVTl0T1NKWFRVZEc3WDloOD1ceGFuZHlhbmR6');
            done();
        
",kaxcode/modash-testing,https://github.com/kaxcode/modash-testing/blob/master/node_modules/fsevents/node_modules/hawk/test/uri.js,1
"`guessWord` action creator
`guessWord` was called with input value as argument
","
    // create a mock function for `getSecretWord`
    guessWordMock = jest.fn();

    // set up Input, with guessWordMock as a prop
    wrapper = shallow(<UnconnectedInput guessWord={guessWordMock} />);

    // simulate the input
    wrapper.instance().inputBox.current = { value: guessedWord };

    // simulate click on submit button
    const submit = findByTestAttr(wrapper, ""submit-button"");
    submit.simulate(""click"", { preventDefault() {} });
  

    const guessedWordArg = guessWordMock.mock.calls[0][0];
    expect(guessedWordArg).toBe(guessedWord);
  
",alexsjcho/jotto-react-jest-enyzme-testing,https://github.com/alexsjcho/jotto-react-jest-enyzme-testing/blob/master/src/Input.test.js,1
"subnet() method with mask length 31
should compute ipv4 network's first address
","
      assert.equal(ipv4Subnet.firstAddress, '192.168.1.134');
    
",MaxKoldun/Task-10-Tetsing,https://github.com/MaxKoldun/Task-10-Tetsing/blob/master/node_modules/ip/test/api-test.js,1
"ComputerAI: getAlignmentAttack (Get the correct positions of the end points of ship parts discovered)
Attack is made east/right of the ship
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[3][2] = 'X';
    newGameboardPlayer.grid[3][3] = 'H';
    newGameboardPlayer.grid[3][4] = 'H';
    newGameboardPlayer.grid[3][5] = 'H';
    newGameboardPlayer.grid[3][6] = '0';
    const alignmentObj = computerAI.getAlignment(newGameboardPlayer);
    const alignmentCoords = computerAI.getAlignmentAttack(
      newGameboardPlayer,
      alignmentObj[0],
      alignmentObj[1],
      alignmentObj[2],
    );
    expect(alignmentCoords).toStrictEqual([3, 6]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,1
"Player: madeAttack() (Player makes attack to grid) 
Player 1 makes attacks successfully to grid #1
","
    const newPlayer1 = Player(0, 'human', 'default', 'blue');
    const newGameboard2 = Gameboard(0, 8);
    newPlayer1.makeAttack(newGameboard2, [0, 0]);
    newPlayer1.makeAttack(newGameboard2, [1, 0]);
    newPlayer1.makeAttack(newGameboard2, [2, 0]);
    newPlayer1.makeAttack(newGameboard2, [3, 0]);
    const attacks = [
      [0, 0],
      [1, 0],
      [2, 0],
      [3, 0],
    ];
    expect(newGameboard2.grid[0][0]).toBe('X');
    expect(newGameboard2.grid[1][0]).toBe('X');
    expect(newGameboard2.grid[2][0]).toBe('X');
    expect(newGameboard2.grid[3][0]).toBe('X');
    expect(newPlayer1.attacksMade).toEqual(attacks);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/player.test.js,1
"handling an invalid authentication header
should fail with error message.
","
            expect(info).to.be.an.object;
            expect(info).to.be.an.instanceof(Error);
        
",LucasKeiti28/tdd-jest,https://github.com/LucasKeiti28/tdd-jest/blob/master/backend/node_modules/passport-jwt/test/strategy-validation-test.js,1
"
.finderFunction - query builder for jsdom
","
  const dom = { getByText: jest.fn() }

  Dom.finderFunction(dom)([""ByText"", ""a"", ""b""], ""get"")

  expect(dom.getByText).toHaveBeenCalledWith(""a"", ""b"")

",axehomeyg/jest-marmot,https://github.com/axehomeyg/jest-marmot/blob/master/__tests__/marmot/dom.test.js,0
"Player: madeAttack() (Player makes attack to grid) 
Player 1 and Player 2makes attacks successfully to grid
","
    const newPlayer1 = Player(0, 'human', 'default', 'blue');
    const newPlayer2 = Player(1, 'computer', 'default', 'blue');
    const newGameboard1 = Gameboard(0, 8);
    const newGameboard2 = Gameboard(0, 8);
    newPlayer1.makeAttack(newGameboard2, [4, 3]);
    newPlayer2.makeAttack(newGameboard1, [0, 0]);
    newPlayer1.makeAttack(newGameboard2, [4, 4]);
    newPlayer2.makeAttack(newGameboard1, [0, 1]);
    newPlayer1.makeAttack(newGameboard2, [4, 5]);
    newPlayer2.makeAttack(newGameboard1, [0, 2]);
    newPlayer1.makeAttack(newGameboard2, [4, 6]);
    newPlayer2.makeAttack(newGameboard1, [0, 3]);
    const attacks1 = [
      [4, 3],
      [4, 4],
      [4, 5],
      [4, 6],
    ];
    const attacks2 = [
      [0, 0],
      [0, 1],
      [0, 2],
      [0, 3],
    ];
    expect(newGameboard2.grid[4][3]).toBe('X');
    expect(newGameboard1.grid[0][0]).toBe('X');
    expect(newGameboard2.grid[4][4]).toBe('X');
    expect(newGameboard1.grid[0][1]).toBe('X');
    expect(newGameboard2.grid[4][5]).toBe('X');
    expect(newGameboard1.grid[0][2]).toBe('X');
    expect(newGameboard2.grid[4][6]).toBe('X');
    expect(newGameboard1.grid[0][3]).toBe('X');
    expect(newPlayer1.attacksMade).toEqual(attacks1);
    expect(newPlayer2.attacksMade).toEqual(attacks2);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/player.test.js,1
"({ key: value, ... })
passes negated when the actual does not match the expected
","
      expect(wrapper.find(User).first()).to.not.have.props({ index: 2 })
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/props.test.js,0
"------------------------------- DELETE ROUTE------------------------------- 
[ DELETE ] should delete the student with the specified id
","
    await request(server).post('/api/students/').send({
      name: 'mikko',
      cohort: 'web16',
    });
    await request(server).delete('/api/students/1');
    const response = await request(server).get('/api/students/1');
    expect(response.status).toBe(404);
  
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/students/student.test.js,1
"_columnWidths
divides width over remaining columns if first column has width specified
","
      var ui = cliui({
          width: 40
        }),
        widths = ui._columnWidths([{width: 20}, {}, {}])

      widths[0].should.equal(20)
      widths[1].should.equal(10)
      widths[2].should.equal(10)
    
",Sstobo/Jest-Testing,https://github.com/Sstobo/Jest-Testing/blob/master/node_modules/cliui/test/cliui.js,1
"authenticateMessage()
errors on nonce collision
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {
                    nonceFunc: function (key, nonce, ts, nonceCallback) {

                        nonceCallback(true);
                    }
                }, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Invalid nonce');
                    done();
                });
            });
        
",JamieDixon/jest-tester,https://github.com/JamieDixon/jest-tester/blob/master/webapp/node_modules/fsevents/node_modules/hawk/test/server.js,1
"Uri
should generate a bewit then successfully authenticate it (no ext)
","

        var req = {
            method: 'GET',
            url: '/resource/4?a=1&b=2',
            host: 'example.com',
            port: 80
        };

        credentialsFunc('123456', function (err, credentials1) {

            var bewit = Hawk.uri.getBewit('http://example.com/resource/4?a=1&b=2', { credentials: credentials1, ttlSec: 60 * 60 * 24 * 365 * 100 });
            req.url += '&bewit=' + bewit;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials2, attributes) {

                expect(err).to.not.exist();
                expect(credentials2.user).to.equal('steve');
                done();
            });
        });
    
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/fsevents/node_modules/hawk/test/uri.js,1
"(selector)
passes negated when the actual does not match the expected
","
      expect(wrapper.find('#root')).to.not.match('#child')
      expect(wrapper.find('span')).to.not.match('#root')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/match.test.js,0
"HAS_BOOLEAN_VALUE attrs
passes negated when attribute exists but has value `false`
","
        expect(wrapper.find('video')).to.not.have.attr('hidden')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,0
"Gameboard: receiveAttack() (Check if attack is valid)
Ship with 3 length is sunk after 3 attacks received
","
    const newGameboard = Gameboard(0, 8);
    const newShip = Ship(0, 3, [], false, 'horizontal');
    newGameboard.placeShip(newShip, [1, 3]);
    newGameboard.receiveAttack([1, 3]);
    newGameboard.receiveAttack([1, 4]);
    newGameboard.receiveAttack([1, 5]);
    expect(newShip.isSunk()).toBe(true);
    expect(newGameboard.grid[1][3]).toBe('S');
    expect(newGameboard.grid[1][4]).toBe('S');
    expect(newGameboard.grid[1][5]).toBe('S');
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/gameboard.test.js,1
"Gameboard: receiveAttack() (Check if attack is valid)
Gameboard allows attack on a ship (1 attack)
","
    const newGameboard = Gameboard(0, 8);
    const newShip = Ship(0, 3, [], false, 'horizontal');
    newGameboard.placeShip(newShip, [1, 3]);
    newGameboard.receiveAttack([1, 3]);
    expect(newShip.hits).toEqual([0]);
    expect(newGameboard.grid[1][3]).toBe('H');
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/gameboard.test.js,1
"mediaQueries
should have an ""l"" breakpoint
","
    const Div = styled.div`
      ${mq.l`content: ""test"";`};
    `;
    const renderedComponent = shallow(<Div />);
    expect(toJson(renderedComponent)).toMatchSnapshot();
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/styles/templates/tests/mediaQueries.test.js,1
"getYieldForCrop
Get yield for crop, simple
","
    const input = {
      crop: corn,
      num_crops: 10,
    };
    expect(getYieldForCrop(input)).toBe(300);
  
",ramonsnellink/ramon_snellink-TDD_groentetuin,https://github.com/ramonsnellink/ramon_snellink-TDD_groentetuin/blob/master/farm.test.js,-
"(key, value)
chains
","
    expect(wrapper.find(User).first()).to.have.prop('index').equal(1)
    expect(wrapper.find(User).first()).to.have.prop('objectProp').deep.equal({foo: 'bar'})
  
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/prop.test.js,0
"and follow_set_cookies is true
should have all the cookies
","
          needle.get(TEST_HOST + ':' + testPort + '/0', opts, function(err, resp) {
            resp.cookies.should.have.property(WEIRD_COOKIE_NAME);
            resp.cookies.should.have.property(BASE64_COOKIE_NAME);
            resp.cookies.should.have.property(FORBIDDEN_COOKIE_NAME);
            resp.cookies.should.have.property(NUMBER_COOKIE_NAME);
            resp.cookies.should.have.property('FOO');
            resp.cookies.FOO.should.eql('BAR'); // should overwrite previous one
            done();
          });
        
",OdongoWaga/Vidly-API,https://github.com/OdongoWaga/Vidly-API/blob/master/node_modules/bcrypt/node_modules/needle/test/cookies_spec.js,1
"<Profiles />
renders the <Profiles />
","
    const user = { displayName: ""Nelly"", photoURL: ""profile.png"" };
    const setProfile = jest.fn(); //mocking a function
    const { getByTestId } = render(
      <SelectProfileContainer user={user} setProfile={setProfile} />
    );

    fireEvent.click(getByTestId(""user-profile""));
    expect(setProfile).toHaveBeenCalled();
  
",chinel/netflix-clone-in-react,https://github.com/chinel/netflix-clone-in-react/blob/master/src/__tests__/containers/profile.test.js,-
"authenticateMessage()
should fail authorization on missing credentials
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                expect(auth).to.exist();

                var errFunc = function (id, callback) {

                    callback();
                };

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Unknown credentials');
                    done();
                });
            });
        
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/hawk/test/server.js,1
"Gameboard: receiveAttack() (Check if attack is valid)
Gameboard correctly records missed attack (ship on board)
","
    const newGameboard = Gameboard(0, 8);
    const newShip = Ship(0, 3, [], false, 'horizontal');
    newGameboard.placeShip(newShip, [1, 3]);
    newGameboard.receiveAttack([7, 0]);
    expect(newGameboard.grid[7][0]).toBe('X');
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/gameboard.test.js,1
"Package
should follow versions
","
    cy.visit(VISIT_URL); // direct visit
    cy.getByTestId(""versions-tab"")
      .getByText(/Versions \(/)
      .click(); // open tab
    cy.getByTestId(""versions-tab"")
      .getByText(""15.4.2"")
      .click();
    cy.url().should(""contain"", `/package/react@15.4.2`);
  
",topheman/npm-registry-browser,https://github.com/topheman/npm-registry-browser/blob/master/cypress/integration/package.spec.js,-
"Uri
should fail on empty bewit
","

        var req = {
            method: 'GET',
            url: '/resource/4?bewit=',
            host: 'example.com',
            port: 8080
        };

        Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {

            expect(err).to.exist();
            expect(err.output.payload.message).to.equal('Empty bewit');
            expect(err.isMissing).to.not.exist();
            done();
        });
    
",yuanyu90221/jestSurvey,https://github.com/yuanyu90221/jestSurvey/blob/master/node_modules/hawk/test/uri.js,1
"authenticateMessage()
should fail authorization on nonce error
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                expect(auth).to.exist();

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {
                    nonceFunc: function (key, nonce, ts, callback) {

                        callback(new Error('kaboom'));
                    }
                }, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Invalid nonce');
                    done();
                });
            });
        
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/hawk/test/server.js,1
"with original request cookie
request cookie is not passed to redirects
","
            needle.get('localhost:' + testPort + '/0', opts, function(err, resp) {
              requestCookies.should.eql([""xxx=123"", undefined, undefined, undefined, undefined])
              done();
            });
          
",LaneriTiago/nodejs-tdd-jest,https://github.com/LaneriTiago/nodejs-tdd-jest/blob/master/node_modules/needle/test/cookies_spec.js,-
"ComputerAI: getAlignmentAttack (Get the correct positions of the end points of ship parts discovered)
Attack is made north/top of the ship
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[3][3] = 'H';
    newGameboardPlayer.grid[4][3] = 'H';
    newGameboardPlayer.grid[5][3] = 'H';
    const alignmentObj = computerAI.getAlignment(newGameboardPlayer);
    const alignmentCoords = computerAI.getAlignmentAttack(
      newGameboardPlayer,
      alignmentObj[0],
      alignmentObj[1],
      alignmentObj[2],
    );
    expect(alignmentCoords).toStrictEqual([2, 3]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,1
"getBewit()
returns a valid bewit value (explicit port)
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            };

            var bewit = Hawk.uri.getBewit('https://example.com:8080/somewhere/over/the/rainbow', { credentials: credentials, ttlSec: 300, localtimeOffsetMsec: 1356420407232 - Hawk.utils.now(), ext: 'xandyandz' });
            expect(bewit).to.equal('MTIzNDU2XDEzNTY0MjA3MDdcaFpiSjNQMmNLRW80a3kwQzhqa1pBa1J5Q1p1ZWc0V1NOYnhWN3ZxM3hIVT1ceGFuZHlhbmR6');
            done();
        
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/hawk/test/uri.js,1
"Welcome screen
app shows welcome page
","
      const win = ctx.app.browserWindow;
      expect( await win.isVisible() ).toBeTruthy();
      expect( await ( await ctx.client.$( ""#cWelcome"" ) ).isExisting() ).toBeTruthy();     
      expect( await ctx.boundaryError() ).toBeFalsy();
      await ctx.screenshot( ""welcome-screen"" );
    
",dsheiko/puppetry,https://github.com/dsheiko/puppetry/blob/master/src/__e2e__/specs/firstLaunch.spec.js,1
"(key)
passes when the actual matches the expected
","
      expect(wrapper.find(User).first()).to.have.prop('index')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/prop.test.js,0
"when username is a valid string, and password is an empty string
sends Authorization header
","
      needle.get('localhost:' + port, opts, function(err, resp) {
        var sent_headers = resp.body.headers;
        Object.keys(sent_headers).should.containEql('authorization');
        done();
      })
    
",alexsjcho/jotto-react-jest-enyzme-testing,https://github.com/alexsjcho/jotto-react-jest-enyzme-testing/blob/master/random-word-server/node_modules/fsevents/node_modules/needle/test/basic_auth_spec.js,1
"redux properties
`getSecretWord` runs on App mount
","
  const getSecretWordMock = jest.fn();

  const props = {
    getSecretWord: getSecretWordMock,
    success: false,
    guessedWords: []
  };

  // set up app component with getSecretWordMock as the getSecretWord prop
  const wrapper = shallow(<UnconnectedApp {...props} />);

  // run lifecycle method
  wrapper.instance().componentDidMount();

  // check to see if mock ran
  const getSecretWordCallCount = getSecretWordMock.mock.calls.length;

  expect(getSecretWordCallCount).toBe(1);

",alexsjcho/jotto-react-jest-enyzme-testing,https://github.com/alexsjcho/jotto-react-jest-enyzme-testing/blob/master/src/App.test.js,1
"Polygon Within
should return false if one of the points in a linestring leave the polygon
","
      polygon = new Terraformer.Polygon([ [ [ 5, 5 ], [ 5, 15 ], [ 15, 15 ], [ 15, 5 ], [ 5, 5 ] ] ]);
    

      var ls = new Terraformer.LineString([ [ 6, 6 ], [ 6, 14 ], [ 16, 16 ] ]);
      expect(ls.within(polygon)).toEqual(false);
    
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/terraformer/spec/terraformerSpec.js,1
"<Requeriments />
Render component requeriments
","
        expect(requeriments.length).toEqual(1);
    
",nkrowicki/woloxChallenge,https://github.com/nkrowicki/woloxChallenge/blob/master/src/__test__/components/Requeriments.test.js,0
"Faces: Face component test suite
should convert age to age attribute
","
      const { age } = mockedFace;

      const wrapper = getFace();
      expect(wrapper.exists()).toBeTruthy();

      const ageAttribute = wrapper.find(Attribute).filterWhere(n => n.props().attribute.name === 'age');
      expect(ageAttribute.exists()).toBeTruthy();

      const { value } = ageAttribute.props().attribute;
      expect(value.includes(age.low)).toBeTruthy();
      expect(value.includes(age.high)).toBeTruthy();
    
",gasserandreas/rekognition,https://github.com/gasserandreas/rekognition/blob/master/src/images/detail/__tests__/Faces.test.js,1
"<Benefits />
Render component benefits
","
    expect(benefits.length).toEqual(1);
  
",nkrowicki/woloxChallenge,https://github.com/nkrowicki/woloxChallenge/blob/master/src/__test__/components/Benefits.test.js,0
"authenticateMessage()
should fail authorization on stale timestamp
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                expect(auth).to.exist();

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, { localtimeOffsetMsec: 100000 }, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Stale timestamp');
                    done();
                });
            });
        
",nialloc9/reactReduxJestBoilerplate,https://github.com/nialloc9/reactReduxJestBoilerplate/blob/master/node_modules/hawk/test/uri.js,1
"getSecretWord action creator
correctly adds the secret word to state
","
        moxios.install();
    

       const secretWord = 'party';
       const store = storeFactory();

       moxios.wait(() => {
           const request = moxios.requests.mostRecent();
           request.respondWith({
               status: 200,
               response: secretWord,
           });
       });

       return store.dispatch(getSecretWord())
           .then(() => {
               const newState = store.getState();
               expect(newState.secretWord).toBe(secretWord);
           });

    

        moxios.uninstall();
    
",deepbsd/jestclass,https://github.com/deepbsd/jestclass/blob/master/jotto/src/actions/index.test.js,1
"when username AND password are non empty strings
sends Authorization header
","
      needle.get('localhost:' + port, opts, function(err, resp) {
        var sent_headers = resp.body.headers;
        Object.keys(sent_headers).should.containEql('authorization');
        done();
      })
    
",crudaz/mongodb-testing,https://github.com/crudaz/mongodb-testing/blob/master/node_modules/fsevents/node_modules/needle/test/basic_auth_spec.js,1
"image details container test suite
mapKeyToValue should return params
","
    const string = '?attr1=val1';
    expect(mapKeyToValue(string)).toEqual({
      attr1: 'val1',
    });
  
",gasserandreas/rekognition,https://github.com/gasserandreas/rekognition/blob/master/src/images/detail/__tests__/Container.test.js,1
"(name, value)
passes negated when the actual does not match the expected
","
      expect(wrapper).to.not.have.style('border', '2px')
      expect(wrapper.find('span')).to.not.have.style('color', 'blue')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/style.test.js,0
"mediaQueries
should have an ""xl"" breakpoint
","
    const Div = styled.div`
      ${mq.s`content: ""test"";`};
    `;
    const renderedComponent = shallow(<Div />);
    expect(toJson(renderedComponent)).toMatchSnapshot();
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/styles/templates/tests/mediaQueries.test.js,0
".debug()
should pass through to the debugNodes function
","
      expect(shallow(<div />).debug()).to.equal('<div />');
    
",nialloc9/reactReduxJestBoilerplate,https://github.com/nialloc9/reactReduxJestBoilerplate/blob/master/node_modules/enzyme/test/ShallowWrapper-spec.js,1
"HAS_BOOLEAN_VALUE attrs
passes negated when attribute exists with a falsey (but not false/null/undefined) value
","
        expect(wrapper.find('video')).to.not.have.attr('autoplay')
        expect(wrapper.find('video')).to.not.have.attr('autoPlay')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,0
"(selector)
passes when the actual matches the expected
","
      expect(wrapper.find('#root')).to.match('#root')
      expect(wrapper.find('span')).to.match('#child')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/match.test.js,0
"span
always appends text to prior span if wrap is disabled
","
      var ui = cliui({
        wrap: false,
        width: 40
      })

      ui.span(
        {text: 'i am a string that will be wrapped', width: 30}
      )

      ui.div(
        {text: 'i am a second row', align: 'left', padding: [0, 0, 0, 3]}
      )

      ui.div('a third line')

      var expected = [
       'i am a string that will be wrapped   i am a second row',
       'a third line'
      ]

      ui.toString().split('\n').should.eql(expected)
    
",ultradian/AlexaTesting,https://github.com/ultradian/AlexaTesting/blob/master/node_modules/cliui/test/cliui.js,1
"header()
returns a valid authorization header (no ext)
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            };

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', { credentials: credentials, timestamp: 1353809207, nonce: 'Ygvqdz', payload: 'something to write about', contentType: 'text/plain' }).field;
            expect(header).to.equal('Hawk id=""123456"", ts=""1353809207"", nonce=""Ygvqdz"", hash=""2QfCt3GuY9HQnHWyWD3wX68ZOKbynqlfYmuO2ZBRqtY="", mac=""HTgtd0jPI6E4izx8e4OHdO36q00xFCU0FolNq3RiCYs=""');
            done();
        
",JamieDixon/jest-tester,https://github.com/JamieDixon/jest-tester/blob/master/webapp/node_modules/hawk/test/client.js,-
"generateNormalizedString()
should return a valid normalized string (ext)
","

            expect(Hawk.crypto.generateNormalizedString('header', {
                ts: 1357747017,
                nonce: 'k3k4j5',
                method: 'GET',
                resource: '/resource/something',
                host: 'example.com',
                port: 8080,
                ext: 'this is some app data'
            })).to.equal('hawk.1.header\n1357747017\nk3k4j5\nGET\n/resource/something\nexample.com\n8080\n\nthis is some app data\n');

            done();
        
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/hawk/test/crypto.js,1
"(name)
fails when the actual does not match the expected
","
      expect(() => {
        expect(wrapper).to.have.style('color')
      }).to.throw(""to have a 'color' CSS style property"")

      expect(() => {
        expect(wrapper.find('span')).to.have.style('border')
      }).to.throw(""to have a 'border' CSS style property"")

      expect(() => {
        expect(wrapper).to.not.have.style('border')
      }).to.throw(""not to have a 'border' CSS style property"")

      expect(() => {
        expect(wrapper.find('span')).to.not.have.style('color')
      }).to.throw(""not to have a 'color' CSS style property"")
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/style.test.js,0
"DefaultBuildTab
should be able to update params for non constructor
","
      const { component, tabs } = setup(true);
      tabs.props().onChange({ currentTarget: { value: '' } }, 2);
      component.update();
      const defaultBuildTab = component.find(DefaultBuildTab);
      expect(defaultBuildTab.props().params).toEqual([
        { name: 'testparam2', value: 'a', type: 'uint' }
      ]);
      defaultBuildTab
        .props()
        .onChangeParams([{ name: 'testparam2', value: 'b', type: 'string' }]);
      expect(component.props().onTabsChange).toHaveBeenCalledWith({
        tabsParams: [
          [{ name: 'testparam1', value: 'a', type: 'uint' }],
          [{ name: 'testparam2', value: 'b', type: 'string' }]
        ]
      });
      expect(component.props().onTabsChange).toHaveBeenCalledTimes(1);
    
",Sean2108/LATTE,https://github.com/Sean2108/LATTE/blob/master/test/components/BuildTabs.spec.js,-
"constructed with no options
handles resets
","
            const text = '\x1b[1mthis is bold\x1b[0m, but this isn\'t';
            const result = '<b>this is bold</b>, but this isn\'t';

            return test(text, result, done);
        
",defikabulan/keranjang-ppl,https://github.com/defikabulan/keranjang-ppl/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,-
"mediaQueries
should have an ""xs"" breakpoint
","
    const Div = styled.div`
      ${mq.xs`content: ""test"";`};
    `;
    const renderedComponent = shallow(<Div />);
    expect(toJson(renderedComponent)).toMatchSnapshot();
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/styles/templates/tests/mediaQueries.test.js,1
"(name)
passes negated when the actual does not match the expected
","
      expect(wrapper).to.not.have.style('color')
      expect(wrapper.find('span')).to.not.have.style('border')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/style.test.js,0
"ComputerAI: getAlignmentAttack (Get the correct positions of the end points of ship parts discovered)
Attack is made south/bottom of the ship when last attack is on the boundary
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[3][3] = 'X';
    newGameboardPlayer.grid[4][3] = 'H';
    newGameboardPlayer.grid[5][3] = 'H';
    newGameboardPlayer.grid[6][3] = 'H';
    const alignmentObj = computerAI.getAlignment(newGameboardPlayer);
    const alignmentCoords = computerAI.getAlignmentAttack(
      newGameboardPlayer,
      alignmentObj[0],
      alignmentObj[1],
      alignmentObj[2],
    );
    expect(alignmentCoords).toStrictEqual([7, 3]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,1
"no stream_length set
doesnt set Content-Length header
","
      send_request({}, function(err, resp) {
        should.not.exist(resp.body.headers['content-length']);
        done()
      })
    
",jordantomax/jest-htmlelement-prototype-sandbox,https://github.com/jordantomax/jest-htmlelement-prototype-sandbox/blob/master/node_modules/needle/test/request_stream_spec.js,-
"authenticate()
parses a valid authentication header (sha1)
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""1"", ts=""1353788437"", nonce=""k3j4h2"", mac=""zy79QQ5/EYFmQqutVnYb73gAc/U="", ext=""hello""'
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.not.exist();
                expect(credentials.user).to.equal('steve');
                done();
            });
        
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/hawk/test/server.js,1
"ComputerAI: getAlignmentAttack (Get the correct positions of the end points of ship parts discovered)
Attack is made east/right of the ship when last attack is on the boundary
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[3][3] = 'X';
    newGameboardPlayer.grid[3][4] = 'H';
    newGameboardPlayer.grid[3][5] = 'H';
    newGameboardPlayer.grid[3][6] = 'H';
    const alignmentObj = computerAI.getAlignment(newGameboardPlayer);
    const alignmentCoords = computerAI.getAlignmentAttack(
      newGameboardPlayer,
      alignmentObj[0],
      alignmentObj[1],
      alignmentObj[2],
    );
    expect(alignmentCoords).toStrictEqual([3, 7]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,1
".off()
should remove all listeners for `event`
","
      obj.on('foo', function () {}).off('foo')
        ._events.should.have.property('foo', null);
    
",gtwright/with-jest,https://github.com/gtwright/with-jest/blob/master/node_modules/emitter-mixin/test/person.js,1
"CSSStyleDeclaration
setting border values to ""none"" should clear dependent values
","
    var style = new CSSStyleDeclaration();
    style.borderTopWidth = '1px';
    expect(style.cssText).toEqual('border-top-width: 1px;');
    style.border = 'none';
    expect(style.cssText).toEqual('');
    style.borderTopWidth = '1px';
    expect(style.cssText).toEqual('border-top-width: 1px;');
    style.borderTopStyle = 'none';
    expect(style.cssText).toEqual('');
    style.borderTopWidth = '1px';
    expect(style.cssText).toEqual('border-top-width: 1px;');
    style.borderTop = 'none';
    expect(style.cssText).toEqual('');
    style.borderTopWidth = '1px';
    style.borderLeftWidth = '1px';
    expect(style.cssText).toEqual('border-top-width: 1px; border-left-width: 1px;');
    style.borderTop = 'none';
    expect(style.cssText).toEqual('border-left-width: 1px;');
  
",guidolzc/testing-jest,https://github.com/guidolzc/testing-jest/blob/master/node_modules/cssstyle/lib/CSSStyleDeclaration.test.js,1
"react jsx
should handle hasOwnProperty correctly
","
    var code = '<hasOwnProperty>testing</hasOwnProperty>;';
    var result = 'React.createElement(""hasOwnProperty"", null, ""testing"");';
    expect(transform(code).code).toBe(result);
  
",Moverr/jestcodecov,https://github.com/Moverr/jestcodecov/blob/master/bluh/node_modules/jstransform/visitors/__tests__/react-jsx-test.js,0
"({ key: value, ... })
fails when the actual does not match the expected
","
      expect(() => {
        expect(wrapper.find(User).first()).to.have.props({ index: 2 })
      }).to.throw('to have props { index: 2 }')

      expect(() => {
        expect(wrapper.find(User).first()).to.not.have.props({ index: 1 })
      }).to.throw('not to have props { index: 1 }')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/props.test.js,0
"(nodes)
passes when the actual matches the expected
","
      expect(wrapper).to.contain([<User index={2} />, <User index={3} />])
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/contain.test.js,0
"Overwritten HTMLElement prototype
references this inside of overwritten offsetTop
","
    const wrapper = mount(<Component />)
    const ref = wrapper.instance().ref.current
    console.log(ref.offsetTop)
  
",jordantomax/jest-htmlelement-prototype-sandbox,https://github.com/jordantomax/jest-htmlelement-prototype-sandbox/blob/master/tests/example.test.js,-
"no stream_length set
doesnt work if Transfer-Encoding is set to a blank string
","
      send_request({ headers: { 'Transfer-Encoding': '' }}, function(err, resp) {
        err.code.should.eql('ECONNRESET');
        done()
      })
    
",matloc13/jest-test-blog,https://github.com/matloc13/jest-test-blog/blob/master/node_modules/fsevents/node_modules/needle/test/request_stream_spec.js,-
"subnet() method
should compute ipv4 network's last address
","
      assert.equal(ipv4Subnet.lastAddress, '192.168.1.190');
    
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/ip/test/api-test.js,1
"redux properties
has access to `secretWord` state
","
    const secretWord = ""party"";
    const wrapper = setup({ secretWord });
    const secretWordProp = wrapper.instance().props.secretWord;
    expect(secretWordProp).toBe(secretWord);
  
",alexsjcho/jotto-react-jest-enyzme-testing,https://github.com/alexsjcho/jotto-react-jest-enyzme-testing/blob/master/src/App.test.js,1
"stringify()
does not omit object keys when indices = false
","
        expect(Qs.stringify({ a: [{ b: 'c' }] }, { indices: false })).to.equal('a%5Bb%5D=c');
        done();
    }
",Moverr/jestcodecov,https://github.com/Moverr/jestcodecov/blob/master/bluh/node_modules/react-project/node_modules/qs/test/stringify.js,1
"getBewit()
returns a valid bewit value (null ext)
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            };

            var bewit = Hawk.uri.getBewit('https://example.com/somewhere/over/the/rainbow', { credentials: credentials, ttlSec: 300, localtimeOffsetMsec: 1356420407232 - Hawk.utils.now(), ext: null });
            expect(bewit).to.equal('MTIzNDU2XDEzNTY0MjA3MDdcSUdZbUxnSXFMckNlOEN4dktQczRKbFdJQStValdKSm91d2dBUmlWaENBZz1c');
            done();
        
",Sstobo/Jest-Testing,https://github.com/Sstobo/Jest-Testing/blob/master/node_modules/fsevents/node_modules/hawk/test/uri.js,0
"regular attrs
passes when attribute exists but has value `false`
","
        expect(wrapper.find('audio')).to.have.attr('contenteditable')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,-
"coveragePathIgnorePatterns
does not normalize paths relative to rootDir
","
    // This is a list of patterns, so we can't assume any of them are
    // directories
    const {config} = normalize(
      {
        coveragePathIgnorePatterns: ['bar/baz', 'qux/quux'],
        rootDir: '/root/path/foo',
      },
      '/root/path',
    );

    expect(config.coveragePathIgnorePatterns).toEqual([
      joinForPattern('bar', 'baz'),
      joinForPattern('qux', 'quux'),
    ]);
  
",git-palace/jest,https://github.com/git-palace/jest/blob/master/packages/jest-config/src/__tests__/normalize-test.js,1
"valueType
returns color for rgba(p, p, p, n) with decimal alpha
","
    let input = 'rgba(10%, 10%, 10%, 0.5)';
    let output = parsers.valueType(input);

    expect(output).toEqual(parsers.TYPES.COLOR);
  
",karshak4859/hexlet-jest,https://github.com/karshak4859/hexlet-jest/blob/master/node_modules/cssstyle/lib/parsers.test.js,1
"collectCoverageOnlyFrom
normalizes all paths relative to rootDir
","
    const {config} = normalize(
      {
        collectCoverageOnlyFrom: {
          'bar/baz': true,
          'qux/quux/': true,
        },
        rootDir: '/root/path/foo/',
      },
      '/root/path',
    );

    const expected = {};
    expected[expectedPathFooBar] = true;
    expected[expectedPathFooQux] = true;

    expect(config.collectCoverageOnlyFrom).toEqual(expected);
  
",git-palace/jest,https://github.com/git-palace/jest/blob/master/packages/jest-config/src/__tests__/normalize-test.js,1
"testPathIgnorePatterns
does not normalize paths relative to rootDir
","
    // This is a list of patterns, so we can't assume any of them are
    // directories
    const {config} = normalize(
      {
        rootDir: '/root/path/foo',
        testPathIgnorePatterns: ['bar/baz', 'qux/quux'],
      },
      '/root/path',
    );

    expect(config.testPathIgnorePatterns).toEqual([
      joinForPattern('bar', 'baz'),
      joinForPattern('qux', 'quux'),
    ]);
  
",git-palace/jest,https://github.com/git-palace/jest/blob/master/packages/jest-config/src/__tests__/normalize-test.js,1
"tarball.pipe(unpack(directory, { strip: 0 }, callback))
unpacks the tarball into the directory with subdir package
","
    read(__dirname + '/fixtures/packed.tar').pipe(tar.unpack(__dirname + '/output/unpacked', { strip: 0 } , function (err) {
      if (err) return done(err)
      assert.equal(rfile('./output/unpacked/package/bar.txt'), rfile('./fixtures/to-pack/bar.txt'))
      assert.equal(rfile('./output/unpacked/package/foo.txt'), rfile('./fixtures/to-pack/foo.txt'))
      done()
    }))
  
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/tar-pack/test/index.js,1
"CanOpenModal
should return true if all models have isTemporary to false
","
        const wrapper = shallow(<App {...props} />);
        const { canOpenModal } = wrapper.instance();

        expect(canOpenModal()).toBeTruthy();
      
",ticket721/server,https://github.com/ticket721/server/blob/master/plugins/content-type-builder/admin/src/containers/App/tests/index.test.js,0
"header()
returns a valid authorization header (null ext)
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            };

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', { credentials: credentials, timestamp: 1353809207, nonce: 'Ygvqdz', payload: 'something to write about', contentType: 'text/plain', ext: null }).field;
            expect(header).to.equal('Hawk id=""123456"", ts=""1353809207"", nonce=""Ygvqdz"", hash=""2QfCt3GuY9HQnHWyWD3wX68ZOKbynqlfYmuO2ZBRqtY="", mac=""HTgtd0jPI6E4izx8e4OHdO36q00xFCU0FolNq3RiCYs=""');
            done();
        
",sethcarrino/redux-jest-testing,https://github.com/sethcarrino/redux-jest-testing/blob/master/node_modules/fsevents/node_modules/hawk/test/client.js,0
"Uri
should fail on invalid bewit
","

        var req = {
            method: 'GET',
            url: '/resource/4?bewit=*',
            host: 'example.com',
            port: 8080
        };

        Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes) {

            expect(err).to.exist();
            expect(err.output.payload.message).to.equal('Invalid bewit encoding');
            expect(err.isMissing).to.not.exist();
            done();
        });
    
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/fsevents/node_modules/hawk/test/uri.js,-
"Testing Unit
tan5(6+3)
","
	 assert.equal(a.eval(""tan5(6+3)""),""1"");
  
",MaxKoldun/Task-10-Tetsing,https://github.com/MaxKoldun/Task-10-Tetsing/blob/master/node_modules/math-expression-evaluator/test/index.js,0
"replace-symbols
should change complex symbols, if you feel like trolling yourself
","
    test('.foo { box-shadow: 1px 0.5em 3px $sass-a #f00 }',
      {'1px': '1rem', '0.5em': '10px', '3px': '$sass-b', '$sass-a': '4px', '#f00': 'green' },
      '.foo { box-shadow: 1rem 10px $sass-b 4px green }')
  
",tmtarpinian/jest_introduction,https://github.com/tmtarpinian/jest_introduction/blob/master/node_modules/icss-replace-symbols/test/index.js,0
"generateNormalizedString()
should return a valid normalized string (payload + ext)
","

            expect(Hawk.crypto.generateNormalizedString('header', {
                ts: 1357747017,
                nonce: 'k3k4j5',
                method: 'GET',
                resource: '/resource/something',
                host: 'example.com',
                port: 8080,
                hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',
                ext: 'this is some app data'
            })).to.equal('hawk.1.header\n1357747017\nk3k4j5\nGET\n/resource/something\nexample.com\n8080\nU4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=\nthis is some app data\n');

            done();
        
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/hawk/test/crypto.js,1
"#attr
fails when the actual is not an enzyme wrapper
","
    [undefined, { foo: 'bar' }, [], 'test', 12345].forEach((actual) => {
      expect(() => {
        expect(actual).to.have.attr('key', 'somekey')
      }).to.throw()
    })
  
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,0
"(node)
passes when the actual matches the expected
","
      expect(wrapper).to.contain(<User index={1} />)
      expect(wrapper).to.contain(<User index={2} />)
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/contain.test.js,0
"modulePathIgnorePatterns
does not normalize paths relative to rootDir
","
    // This is a list of patterns, so we can't assume any of them are
    // directories
    const {config} = normalize(
      {
        modulePathIgnorePatterns: ['bar/baz', 'qux/quux'],
        rootDir: '/root/path/foo',
      },
      '/root/path',
    );

    expect(config.modulePathIgnorePatterns).toEqual([
      joinForPattern('bar', 'baz'),
      joinForPattern('qux', 'quux'),
    ]);
  
",git-palace/jest,https://github.com/git-palace/jest/blob/master/packages/jest-config/src/__tests__/normalize-test.js,1
"toConstant(src)
handles ""(function () { while (true); return 10; }())""
","
    try {
      constaninople.toConstant('(function () { while (true); return 10; }())')
    } catch (ex) {
      return
    }
    assert(false, '(function () { while (true); return 10; }()) should result in an error')
  
",KacperMitkowski/Node_React_Simple_API,https://github.com/KacperMitkowski/Node_React_Simple_API/blob/master/api/node_modules/constantinople/test/index.js,0
"cidrSubnet() method
should compute an ipv4 network's last address
","
      assert.equal(ipv4Subnet.lastAddress, '192.168.1.190');
    
",szymonlankauf/Vue-jest,https://github.com/szymonlankauf/Vue-jest/blob/master/node_modules/ip/test/api-test.js,1
"CSSStyleDeclaration
setting values implicit and shorthand properties via csstext and setproperty should propagate to dependent properties
","
    var style = new CSSStyleDeclaration();
    style.cssText = 'border: 1px solid black;';
    expect(style.cssText).toEqual('border: 1px solid black;');
    expect(style.borderTop).toEqual('1px solid black');
    style.border = '';
    expect(style.cssText).toEqual('');
    style.setProperty('border', '1px solid black');
    expect(style.cssText).toEqual('border: 1px solid black;');
  
",miklo88/node-server-boilerplate,https://github.com/miklo88/node-server-boilerplate/blob/master/node_modules/cssstyle/lib/CSSStyleDeclaration.test.js,1
"nonNegativeNumber
passes on nil values
","
    assertPasses((0, _.nonNegativeNumber)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: undefined
    }), 'a');
    assertPasses((0, _.nonNegativeNumber)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: null
    }), 'a');
  
",Sunnypahuja/jest-enzyme,https://github.com/Sunnypahuja/jest-enzyme/blob/master/node_modules/airbnb-prop-types/build-test/nonNegativeNumber.js,-
"HAS_BOOLEAN_VALUE attrs
passes negated when attribute exists but has value `null`
","
        expect(wrapper.find('video')).to.not.have.attr('controls')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,0
"redux properties
has access to `secretWord` piece of state
","
      const secretWord = 'party';
      const wrapper = setup({secretWord});
      const secretWordProp = wrapper.instance().props.secretWord;
      expect(secretWordProp).toBe(secretWord);
    
",deepbsd/jestclass,https://github.com/deepbsd/jestclass/blob/master/jotto/src/App.test.js,1
"header()
generates header (null ext)
","

            var credentials = {
                id: '123456',
                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                algorithm: 'sha256',
                user: 'steve'
            };

            var artifacts = {
                method: 'POST',
                host: 'example.com',
                port: '8080',
                resource: '/resource/4?filter=a',
                ts: '1398546787',
                nonce: 'xUwusx',
                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',
                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',
                id: '123456'
            };

            var header = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: null });
            expect(header).to.equal('Hawk mac=\""6PrybJTJs20jsgBw5eilXpcytD8kUbaIKNYXL+6g0ns=\"", hash=\""f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=\""');
            done();
        
",sethcarrino/redux-jest-testing,https://github.com/sethcarrino/redux-jest-testing/blob/master/node_modules/hawk/test/server.js,0
"or() method
should or bits in ipv6 addresses
","
      assert.equal(ip.or('::ff', '::abcd:dcba:abcd:dcba'),
                   '::abcd:dcba:abcd:dcff');
    
",lexblagus/react-class-expensify,https://github.com/lexblagus/react-class-expensify/blob/master/node_modules/ip/test/api-test.js,1
"CSSStyleDeclaration
setting a shorthand property, whose shorthands are implicit properties, to an empty string should clear all dependent properties
","
    var style = new CSSStyleDeclaration();
    style.borderTopWidth = '1px';
    expect(style.cssText).toEqual('border-top-width: 1px;');
    style.border = '';
    expect(style.cssText).toEqual('');
    style.borderTop = '1px solid black';
    expect(style.cssText).toEqual('border-top: 1px solid black;');
    style.border = '';
    expect(style.cssText).toEqual('');
  
",leonbeau/JsSuanFa,https://github.com/leonbeau/JsSuanFa/blob/master/node_modules/cssstyle/lib/CSSStyleDeclaration.test.js,1
"stripUnlikelyCandidates(node)
strips unlikely matches from the doc
","
      assertBeforeAndAfter('whitelistMatch', stripUnlikelyCandidates);
    
",postlight/mercury-parser,https://github.com/postlight/mercury-parser/blob/master/src/utils/dom/strip-unlikely-candidates.test.js,-
"({ key: value, ... })
passes when the actual matches the expected
","
      expect(wrapper.find(User).first()).to.have.props({ index: 1 })
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/props.test.js,0
"and follow_set_cookies is false
no cookie header set on redirection request
","
          var spy = sinon.spy(cookies, 'write');

          needle.get(TEST_HOST + ':' + testPort + '/0', opts, function(err, resp) {
            spy.callCount.should.eql(0);
            done();
          });
        
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/node_modules/fsevents/node_modules/needle/test/cookies_spec.js,-
"------------------------------- POST ROUTE -------------------------------
[ POST 200 ] should return 200  
","
    const response = await request(server).post('/api/students').send({
      name: 'jb 1', cohort: 'cohort 1',
    });

    expect(response.status).toBe(200);

    done();
  
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/students/student.test.js,-
"with json: false (default)
sends request, adding data as querystring
","
            spystub_request();

            get('foo=bar', { json: false }, function(err, resp) {
              check_request('get');
              stub.args[0][0]['path'].should.equal('/?foo=bar')
              done();
            })
          
",SidiOuld/Testing-With-Jest,https://github.com/SidiOuld/Testing-With-Jest/blob/master/node_modules/needle/test/post_data_spec.js,1
"setupTestFrameworkScriptFile
normalizes the path according to rootDir
","
    Resolver = require('jest-resolve');
    Resolver.findNodeModule = jest.fn(
      name => name.startsWith('/') ? name : '/root/path/foo' + path.sep + name,
    );
  

    const {config} = normalize(
      {
        rootDir: '/root/path/foo',
        setupTestFrameworkScriptFile: 'bar/baz',
      },
      '/root/path',
    );

    expect(config.setupTestFrameworkScriptFile).toEqual(expectedPathFooBar);
  
",git-palace/jest,https://github.com/git-palace/jest/blob/master/packages/jest-config/src/__tests__/normalize-test.js,1
"HAS_BOOLEAN_VALUE attrs
passes negated when attribute exists but has value `undefined`
","
        expect(wrapper.find('video')).to.not.have.attr('loop')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,1
"Testing out emmited events
support multiple paths at once
","
    fileset('**/*.js *.md', 'node_modules/**')
      .on('error', done)
      .on('end', function(results) {
        assert.ok(Array.isArray(results), 'should be an array');
        assert.equal(results.length, 2);

        assert.deepEqual(results, [
          'fixtures/an (odd) filename.js',
          'mocha.js'
        ]);

        done();
      });
  
",yashnerella/reactJs-basicsJest,https://github.com/yashnerella/reactJs-basicsJest/blob/master/node_modules/fileset/test/mocha.js,1
"events
emits error and client if an idle client in the pool hits an error
","
    var pool = new Pool()
    pool.connect(function (err, client) {
      expect(err).to.equal(null)
      client.release()
      setImmediate(function () {
        client.emit('error', new Error('problem'))
      })
      pool.once('error', function (err, errClient) {
        expect(err.message).to.equal('problem')
        expect(errClient).to.equal(client)
        done()
      })
    })
  
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/pg-pool/test/events.js,1
"redux properties
getSecretWord action creator is a function on the props
","
      const wrapper = setup();
      const getSecretWordProp = wrapper.instance().props.getSecretWord;
      expect(getSecretWordProp).toBeInstanceOf(Function);
    
",deepbsd/jestclass,https://github.com/deepbsd/jestclass/blob/master/jotto/src/App.test.js,-
"._innerRegex
supports the legacy syntax
","
      expect(""@ sourceMappingURL=http://www.example.com/foo/bar.js.map"")
        .to.match(sourceMappingURL._innerRegex)
    
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/source-map-url/test/source-map-url.js,-
"BuildOptionsPopover component
should work correctly for saving contracts
","
    const { component, functions } = setup(
      3
    );
    expect(component.find(Popover).props().open).toBe(true);
    const textField = component.find(TextField);
    expect(textField).toHaveLength(1);
    expect(component.find(Select)).toHaveLength(0);
    expect(textField.props().value).toEqual('test.json');
    textField.props().onChange();
    expect(functions.handleChange).toHaveBeenCalledWith('fileName');
    expect(functions.innerHandleChange).toHaveBeenCalledTimes(1);
    const button = component.find(Button);
    button.props().onClick();
    expect(functions.saveContract).toHaveBeenCalledTimes(1);
  
",Sean2108/LATTE,https://github.com/Sean2108/LATTE/blob/master/test/components/BuildOptionsPopver.spec.js,0
"------------------------------- DELETE ROUTE------------------------------- 
[ DELETE 404 ]should give status of 404 if student does not exist
","
    await request(server).post('/api/students/').send({
      name: 'mikko',
      cohort: 'web16',
    });
    const response = await request(server).delete('/api/students/1230');
    expect(response.status).toBe(404);
  
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/students/student.test.js,1
"unauthorized()
returns a WWW-Authenticate header set to the schema array value
","

        var err = Boom.unauthorized(null, ['Test','one','two']);
        expect(err.output.statusCode).to.equal(401);
        expect(err.output.headers['WWW-Authenticate']).to.equal('Test, one, two');
        done();
    
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/boom/test/index.js,1
"(text)
works with contain/include
","
      expect(wrapper.find('#child')).to.contain.text('Te')
      expect(wrapper.find('#child')).to.include.text('Te')
      expect(wrapper.find('#child')).to.not.contain.text('other')
      expect(wrapper.find('#child')).to.not.include.text('other')
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/text.test.js,0
"`guessWord` action creator call
input box is cleared on submit
","
        guessWordMock = jest.fn();
        const props = {
            guessWord: guessWordMock,
        };
        
        // pass props to the testing component
        wrapper = shallow(<UnconnectedInput {...props} />);

        // pass values to the inputBox
        wrapper.instance().inputBox.current = { value: guessedWord }

        // Simulate the click on the submit button
        const button = findByTestAttr(wrapper, 'submit-button');
        button.simulate('click', { preventDefault() {} });
    

        expect(wrapper.instance().inputBox.current.value).toBe('');
    
",deepbsd/jestclass,https://github.com/deepbsd/jestclass/blob/master/jotto/src/Input.test.js,1
"fs module
write/read/unlink (callbacks)
","
        fs.exists(TESTFILE, function(exists) {
            if (exists) {
                return done(""Pre-existing file ""+TESTFILE+""; aborting test."");
            }
            fs.writeFile(TESTFILE, 'hello', 'utf-8', function(err) {
                if (err) { return done(err); }
                fs.exists(TESTFILE, function(exists) {
                    if (!exists) {
                        return done(TESTFILE+"" not found"");
                    }
                    fs.readFile(TESTFILE, 'utf-8', function(err, contents) {
                        if (err) { return done(err); }
                        if (contents !== 'hello') {
                            return done(""File contents are not right"");
                        }
                        fs.unlink(TESTFILE, function(err) {
                            if (err) { return done(err); }
                            fs.exists(TESTFILE, function(exists) {
                                if (exists) {
                                    return done(""unlink didn't work"");
                                }
                                done(/*success!*/);
                            });
                        });
                    });
                });
            });
        });
    
",Tashinyimala/Unit-Testing-Jest,https://github.com/Tashinyimala/Unit-Testing-Jest/blob/master/node_modules/pn/test/fs.js,0
"makeVar
resolves by CLASS_NAME
","
     const name = makeVar({
       ...DEFAULT_OBJ,
       tagName: ""DIV"",
       className: ""baz""
     });
     expect( name ).toBe( ""DIV_CLASS_BAZ"" );
  
",dsheiko/puppetry,https://github.com/dsheiko/puppetry/blob/master/app/__tests__/recorder/service/target.spec.js,1
"authenticate()
errors on missing credentials
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                host: 'example.com',
                port: 8080,
                authorization: 'Hawk id=""123"", ts=""1353788437"", nonce=""k3j4h2"", mac=""/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos="", ext=""hello""'
            };

            var credentialsFuncion = function (id, callback) {

                return callback(null, null);
            };

            Hawk.server.authenticate(req, credentialsFuncion, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Unknown credentials');
                done();
            });
        
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/hawk/test/server.js,1
"core
should generate a normalized string protocol example
","

            var normalized = Hawk.crypto.generateNormalizedString('header', {
                credentials: credentials,
                ts: options.timestamp,
                nonce: options.nonce,
                method: 'GET',
                resource: '/resource?a=1&b=2',
                host: 'example.com',
                port: 8000,
                ext: options.ext
            });

            expect(normalized).to.equal('hawk.1.header\n1353832234\nj4h3g2\nGET\n/resource?a=1&b=2\nexample.com\n8000\n\nsome-app-ext-data\n');
            done();
        
",lexblagus/react-class-expensify,https://github.com/lexblagus/react-class-expensify/blob/master/node_modules/fsevents/node_modules/hawk/test/readme.js,1
"({ key: value, ... })
chains
","
    expect(wrapper.find(User).first()).to.have.props([ 'index', 'objectProp' ]).deep.equal([ 1, {foo: 'bar'} ])
  
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/props.test.js,0
"Polygon Within
should return true if all of the points in a linestring are in the same polygon
","
      polygon = new Terraformer.Polygon([ [ [ 5, 5 ], [ 5, 15 ], [ 15, 15 ], [ 15, 5 ], [ 5, 5 ] ] ]);
    

      var ls = new Terraformer.LineString([ [ 6, 6 ], [ 6, 14 ], [ 14, 14 ] ]);
      expect(ls.within(polygon)).toEqual(true);
    
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/terraformer/spec/terraformerSpec.js,1
"MultiPolygon Within
should return false if a part of a multilinestring is not within a multipolygon
","
      multipolygon = new Terraformer.MultiPolygon([ [ [ [ 5, 5 ], [ 5, 15 ], [ 15, 15 ], [ 15, 5 ], [ 5, 5 ] ] ], [ [ [ 25, 25 ], [ 25, 35 ], [ 35, 35 ], [ 35, 25 ], [ 25, 25 ] ] ] ]);
    

      var mls = new Terraformer.MultiLineString([ [ [ 6, 6 ], [ 6, 14 ] ], [ [ 1, 1 ], [ 1, 2 ] ] ]);
      expect(mls.within(multipolygon)).toEqual(false);
    
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/terraformer/spec/terraformerSpec.js,1
"util/core/every
returns true when the callback function returns true for every element in an iterable
","
        var obj = [true, true, true, true];
        var allTrue = every(obj, function(val) {
            return val;
        });

        assert(allTrue);
    
",fhutzchx/Lab8_Jest,https://github.com/fhutzchx/Lab8_Jest/blob/master/node_modules/@sinonjs/commons/lib/every.test.js,1
"<Blog />
vote handler is called twice if vote button is clicked twice
","
    const loggedInUser = { name: ""Leevi Lähettäjä"", username: ""leevil"" };
    component = render(
      <Blog
        blog={{
          title: ""Testiblogi"",
          author: ""Teemu Testaaja"",
          url: ""http://www.google.com"",
          user: { name: ""Leevi Lähettäjä"", username: ""leevil"" }
        }}
        loggedInUser={loggedInUser}
        voteClickHandler={mockVoteClickHandler}
      />
    );
  

    const voteButton = component.getByText(""vote"");
    fireEvent.click(voteButton);
    fireEvent.click(voteButton);
    expect(mockVoteClickHandler.mock.calls).toHaveLength(2);
  
",TonySapa/full-stack-helsinki,https://github.com/TonySapa/full-stack-helsinki/blob/master/bloglist_frontend/src/components/Blog.test.js,1
"<Circle />
should have a className attribute
","
    const renderedComponent = mount(<Circle />);
    expect(renderedComponent.find('div').prop('className')).toBeDefined();
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/components/LoadingIndicator/tests/Circle.test.js,1
"invalid
undef
","
      assert(!url(undefined));
    
",Lduplessier/JEST,https://github.com/Lduplessier/JEST/blob/master/node_modules/is-url/test/index.js,0
"<Benefits />
Render h1 component
","
    expect(benefits.find("".titleBenefits"").text()).toEqual(
      ""benefits.titlebenefits.title2""
    );
  
",nkrowicki/woloxChallenge,https://github.com/nkrowicki/woloxChallenge/blob/master/src/__test__/components/Benefits.test.js,0
"constructed with no options
drops ED code with 0 parameter
","
            const text = '\x1b[Jhello';
            const result = 'hello';

            return test(text, result, done);
        
",defikabulan/keranjang-ppl,https://github.com/defikabulan/keranjang-ppl/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,1
"Add Node
should visualize the intermediary node
","
    cy.get('.ToolBar').within(() => {
      cy.contains('Visualize').click()
    })
    cy.wait(5000)
    cy.get('#node-8-22').should('have.css', 'background-color', 'rgb(255, 105, 180)')
  
",JoshLampen/pathfinder,https://github.com/JoshLampen/pathfinder/blob/master/cypress/integration/addNode.spec.js,-
"redux properties
`getSecretWord` action creator is a function on the props
","
    const wrapper = setup();
    const getSecretWordProp = wrapper.instance().props.getSecretWord;
    expect(getSecretWordProp).toBeInstanceOf(Function);
  
",alexsjcho/jotto-react-jest-enyzme-testing,https://github.com/alexsjcho/jotto-react-jest-enyzme-testing/blob/master/src/App.test.js,-
"sprintfjs
should return formated strings for simple placeholders
","
        assert.equal(""%"", sprintf(""%%""))
        assert.equal(""10"", sprintf(""%b"", 2))
        assert.equal(""A"", sprintf(""%c"", 65))
        assert.equal(""2"", sprintf(""%d"", 2))
        assert.equal(""2"", sprintf(""%i"", 2))
        assert.equal(""2"", sprintf(""%d"", ""2""))
        assert.equal(""2"", sprintf(""%i"", ""2""))
        assert.equal('{""foo"":""bar""}', sprintf(""%j"", {foo: ""bar""}))
        assert.equal('[""foo"",""bar""]', sprintf(""%j"", [""foo"", ""bar""]))
        assert.equal(""2e+0"", sprintf(""%e"", 2))
        assert.equal(""2"", sprintf(""%u"", 2))
        assert.equal(""4294967294"", sprintf(""%u"", -2))
        assert.equal(""2.2"", sprintf(""%f"", 2.2))
        assert.equal(""3.141592653589793"", sprintf(""%g"", pi))
        assert.equal(""10"", sprintf(""%o"", 8))
        assert.equal(""%s"", sprintf(""%s"", ""%s""))
        assert.equal(""ff"", sprintf(""%x"", 255))
        assert.equal(""FF"", sprintf(""%X"", 255))
        assert.equal(""Polly wants a cracker"", sprintf(""%2$s %3$s a %1$s"", ""cracker"", ""Polly"", ""wants""))
        assert.equal(""Hello world!"", sprintf(""Hello %(who)s!"", {""who"": ""world""}))
    
",sanjuictgroup/jest,https://github.com/sanjuictgroup/jest/blob/master/node_modules/sprintf-js/test/test.js,-
"server
encodes special characters in title
","
            ReactDOM.render(
                <Helmet title=""Dangerous <script> include"" />,
                container
            );

            const head = Helmet.rewind();

            expect(head.title).to.exist;
            expect(head.title).to.respondTo(""toString"");

            expect(head.title.toString()).to.equal(stringifiedTitle);
        
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/react-helmet/test/HelmetTest.js,1
"the ""isGhost"" property
should accept boolean ""false"" as value
","
      const renderedComponent = shallow(<SpeechBubble isGhost={false} />);
      expect(toJson(renderedComponent)).toMatchSnapshot();
    
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/components/SpeechBubble/tests/index.test.js,1
"parse
do not double escape spaces
","
    var subject = parse('postgres://localhost/post%20gres');
    subject.database.should.equal('post gres');
  
",LucasKeiti28/tdd-jest,https://github.com/LucasKeiti28/tdd-jest/blob/master/backend/node_modules/knex/node_modules/pg-connection-string/test/parse.js,1
"integer
passes on negative zero
","
    assertPasses((0, _.integer)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: -0
    }), 'a');
  
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/airbnb-prop-types/build-test/integer.js,1
"parseHost()
returns port 443 for non tls node request
","

            var req = {
                method: 'POST',
                url: '/resource/4?filter=a',
                headers: {
                    host: 'example.com',
                    'content-type': 'text/plain;x=y'
                },
                connection: {
                    encrypted: true
                }
            };

            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(443);
            done();
        
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/hawk/test/utils.js,1
"nonNegativeNumber
passes on positive numbers
","
    var validator = (0, _.nonNegativeNumber)();
    assertPasses(validator, /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: 1
    }), 'a');
    assertPasses(validator.isRequired, /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: 1
    }), 'a');
    assertPasses(validator, /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: 42
    }), 'a');
    assertPasses(validator.isRequired, /*#__PURE__*/_react[""default""].createElement(""div"", {
      a: 42
    }), 'a');
  
",Sunnypahuja/jest-enzyme,https://github.com/Sunnypahuja/jest-enzyme/blob/master/node_modules/airbnb-prop-types/build-test/nonNegativeNumber.js,-
"when username is an empty string, and password is a valid string
doesnt send any Authorization headers
","
      needle.get('localhost:' + port, { parse: true }, function(err, resp) {
        var sent_headers = resp.body.headers;
        Object.keys(sent_headers).should.not.containEql('authorization');
        done();
      })
    
",YannickLeRoux/tdd-katas-typescript,https://github.com/YannickLeRoux/tdd-katas-typescript/blob/master/arrays/2d-array-hourglass/node_modules/fsevents/node_modules/needle/test/basic_auth_spec.js,1
" test  Login
Existance of Login components
","
    expect(wrapper).toBeDefined()
  
",steinko/todofrontend,https://github.com/steinko/todofrontend/blob/master/src/components/todo/login/Login-test.js,0
"#close
should not execute any task and emit a drained event when close forcefully
","
			var queue = SeqQueue.createQueue(timeout);
			var drainedEventCount = 0;
			queue.on('drained', function() {
				drainedEventCount++;
			});
			var executedTaskCount = 0;
			queue.push(function(task) {
				//never should be executed
				executedTaskCount++;
				task.done();
			}).should.be.true;
			queue.close(true);
			queue.should.have.property('status', SeqQueue.DRAINED);
			
			// wait all task finished
			setTimeout(function() {
				executedTaskCount.should.equal(0);
				drainedEventCount.should.equal(1);
				done();
			}, 1000);
		
",LaneriTiago/nodejs-tdd-jest,https://github.com/LaneriTiago/nodejs-tdd-jest/blob/master/node_modules/seq-queue/test/seq-queue-test.js,1
"four-segment versions - https://www.chromium.org/developers/version-numbers
should compare versions with different number of digits in different groups
","
    assert.equal(compare('11.1.10', '11.0'), 1);
  
",alaincodes/exercism-jest,https://github.com/alaincodes/exercism-jest/blob/master/javascript/two-fer/node_modules/compare-versions/test/compare.js,1
"Log
should console log our msg
","
		expect(log('test')).toBe(undefined);
	
",JoeKarlsson/react-redux-boilerplate,https://github.com/JoeKarlsson/react-redux-boilerplate/blob/master/src/server/helper/log.spec.js,0
"action creators
should have Requests
","
    expect(Request.headlinesRefresh(myMock)).toBeUndefined();
    expect(Request.indexesRefresh(myMock)).toBeUndefined();
    expect(Request.instrumentSearch({}, myMock)).toBeTruthy();
    expect(Request.instrumentsRefresh()).toBeUndefined();
    expect(Request.pricesRefresh()).toBeUndefined();
    expect(Request.seriesFetch()).toBeUndefined();
    expect(Request.seriesRefresh('active')).toBeUndefined();
    expect(Request.seriesRefreshActive()).toBeUndefined();
    expect(Request.seriesRefreshAll()).toBeUndefined();
    expect(Request.statusCheck('')).toEqual("""");
  
",jcpny1/portfolio-analyzer,https://github.com/jcpny1/portfolio-analyzer/blob/master/client/_test_/ActionCreators.test.js,-
"Gameboard: Ship placement
Ships can be placed and board reflects correct positions (5 ships)
","
    const newGameboard = Gameboard(0, 8);
    const newShip0 = Ship(0, 1, [], false, 'horizontal');
    const newShip1 = Ship(1, 2, [], false, 'horizontal');
    const newShip2 = Ship(2, 4, [], false, 'horizontal');
    const newShip3 = Ship(3, 4, [], false, 'vertical');
    const newShip4 = Ship(4, 4, [], false, 'vertical');
    newGameboard.placeShip(newShip0, [1, 3]);
    newGameboard.placeShip(newShip1, [3, 1]);
    newGameboard.placeShip(newShip2, [5, 0]);
    newGameboard.placeShip(newShip3, [2, 5]);
    newGameboard.placeShip(newShip4, [4, 7]);
    const coords0 = [[1, 3]];
    const coords1 = [
      [3, 1],
      [3, 2],
    ];
    const coords2 = [
      [5, 0],
      [5, 1],
      [5, 2],
      [5, 3],
    ];
    const coords3 = [
      [2, 5],
      [3, 5],
      [4, 5],
      [5, 5],
    ];
    const coords4 = [
      [4, 7],
      [5, 7],
      [6, 7],
      [7, 7],
    ];
    expect(newGameboard.grid).toEqual([
      ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'],
      ['E', 'E', 'E', '00', 'E', 'E', 'E', 'E'],
      ['E', 'E', 'E', 'E', 'E', '30', 'E', 'E'],
      ['E', '10', '11', 'E', 'E', '31', 'E', 'E'],
      ['E', 'E', 'E', 'E', 'E', '32', 'E', '40'],
      ['20', '21', '22', '23', 'E', '33', 'E', '41'],
      ['E', 'E', 'E', 'E', 'E', 'E', 'E', '42'],
      ['E', 'E', 'E', 'E', 'E', 'E', 'E', '43'],
    ]);
    expect(newGameboard.ships[0].coords).toEqual(coords0);
    expect(newGameboard.ships[0].ship).toEqual(newShip0);
    expect(newGameboard.ships[1].coords).toEqual(coords1);
    expect(newGameboard.ships[1].ship).toEqual(newShip1);
    expect(newGameboard.ships[2].coords).toEqual(coords2);
    expect(newGameboard.ships[2].ship).toEqual(newShip2);
    expect(newGameboard.ships[3].coords).toEqual(coords3);
    expect(newGameboard.ships[3].ship).toEqual(newShip3);
    expect(newGameboard.ships[4].coords).toEqual(coords4);
    expect(newGameboard.ships[4].ship).toEqual(newShip4);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/gameboard.test.js,1
"stream_length is set to valid value
sets Content-Length header to that value
","
      send_request({ stream_length: 11 }, function(err, resp) {
        resp.body.headers['content-length'].should.eql('11');
        done()
      })
    
",ivansoares90/users-api,https://github.com/ivansoares90/users-api/blob/master/node_modules/needle/test/request_stream_spec.js,-
"*Group
performs addGroup
","
      const res = actions.addGroup({ title: FIX_TITLE });
      expect( res.payload.options.title ).toEqual( FIX_TITLE );
    
",dsheiko/puppetry,https://github.com/dsheiko/puppetry/blob/master/src/__tests__/action/actions.spec.js,0
"writing less than the file size
should write to the file
","
      fs.readFile(
        __dirname + '/test-rolling-file-stream-write-less', 'utf8',
        function (err, contents) {
          contents.should.eql('cheese');
          done(err);
        }
      );
    
",Moverr/jestcodecov,https://github.com/Moverr/jestcodecov/blob/master/bluh/node_modules/streamroller/test/RollingFileStream-test.js,-
"_columnWidths
keeps track of remaining width if multiple columns have width specified
","
      var ui = cliui({
          width: 40
        }),
        widths = ui._columnWidths([{width: 20}, {width: 12}, {}])

      widths[0].should.equal(20)
      widths[1].should.equal(12)
      widths[2].should.equal(8)
    
",yashnerella/reactJs-basicsJest,https://github.com/yashnerella/reactJs-basicsJest/blob/master/node_modules/cliui/test/cliui.js,1
"constructed with no options
drops setusg0 sequence
","
            const text = '\x1b[(Bhello';
            const result = 'hello';

            return test(text, result, done);
        
",defikabulan/keranjang-ppl,https://github.com/defikabulan/keranjang-ppl/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,1
"file.pipe(unpack(directory, callback))
copies the file into the directory
","
    read(__dirname + '/fixtures/packed-file.txt').pipe(tar.unpack(__dirname + '/output/unpacked', function (err) {
      if (err) return done(err)
      assert.equal(rfile('./output/unpacked/index.js'), rfile('./fixtures/packed-file.txt'))
      done()
    }))
  
",sethcarrino/redux-jest-testing,https://github.com/sethcarrino/redux-jest-testing/blob/master/node_modules/tar-pack/test/index.js,1
"Paging
Supports paging by cast
","
    await MoviesDAO.injectDB(global.mflixClient)
  

    const filters = { cast: [""Natalie Portman""] }
    /**
     * Testing first page
     */
    const { moviesList: firstPage, totalNumMovies } = await MoviesDAO.getMovies(
      {
        filters,
      },
    )

    // check the total number of movies, including both pages
    expect(totalNumMovies).toEqual(23)

    // check the number of movies on the first page
    expect(firstPage.length).toEqual(20)

    // check some of the movies on the second page
    const firstMovie = firstPage[0]
    const twentiethMovie = firstPage.slice(-1).pop()
    expect(firstMovie.title).toEqual(
      ""Star Wars: Episode III - Revenge of the Sith"",
    )
    expect(twentiethMovie.title).toEqual(""Knight of Cups"")

    /**
     * Testing second page
     */
    const { moviesList: secondPage } = await MoviesDAO.getMovies({
      filters,
      page: 1,
    })

    // check the number of movies on the second page
    expect(secondPage.length).toEqual(3)
    // check some of the movies on the second page
    const twentyFirstMovie = secondPage[0]
    const lastMovie = secondPage.slice(-1).pop()
    expect(twentyFirstMovie.title).toEqual(""A Tale of Love and Darkness"")
    expect(lastMovie.title).toEqual(""True"")
  
",sourabh-repo/mflix-node-app,https://github.com/sourabh-repo/mflix-node-app/blob/master/test/paging.test.js,-
"mquery + callback
works
","
          var m = mquery({ name: name });
          mquery(col).remove(m, function(err) {
            assert.ifError(err);
            mquery(col).find(function(err, docs) {
              assert.ifError(err);
              assert.ok(docs);
              assert.equal(1, docs.length);
              assert.equal('shelly', docs[0].name);
              done();
            });
          });
        
",charliebarber/bloglist,https://github.com/charliebarber/bloglist/blob/master/node_modules/mquery/test/index.js,0
"<Category />
should render category list without crashing
","
    const wrapper = mount(
      <Category productCount={12} fetchCategories={() => {}} />,
    );
    const goTo = jest.spyOn(wrapper.instance(), 'goTo');
    wrapper.instance().goTo();
    expect(goTo.mock.calls.length).toEqual(1);
  
",p8ul/shopmate-ecommerce-frontend,https://github.com/p8ul/shopmate-ecommerce-frontend/blob/master/src/__tests__/components/Category/categoryList.test.js,-
"ComputerAI: determineAttackType() (AI chooses correct attack)
getSearchAttack() is chosen if only one ship hit exists
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[3][3] = 'H';
    const AIAttack = computerAI.determineAttackType(newGameboardPlayer);
    expect(AIAttack).toBe('search');
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,0
"article with multiple authors
returns multiple authors
","
      url =
        'https://www.newyorker.com/humor/daily-shouts/teas-you-should-probably-get-rid-of-already';
      const html = fs.readFileSync(
        './fixtures/www.newyorker.com/1557834611707.html'
      );
      result = Mercury.parse(url, { html, fallback: false });
    

      const { author } = await result;

      assert.equal(
        author,
        'Ysabel YatesIllustration by Claire LordonMay 10, 2019'
      );
    
",postlight/mercury-parser,https://github.com/postlight/mercury-parser/blob/master/src/extractors/custom/www.newyorker.com/index.test.js,1
"ComputerAI: getAlignment() (set alignment from longest ships attacked)
Horizontal alignment is found #1
","
    const size = 8;
    const newGameboardPlayer = Gameboard(0, size);
    const computerAI = ComputerAI(0);
    newGameboardPlayer.grid[3][3] = 'H';
    newGameboardPlayer.grid[3][4] = 'H';
    newGameboardPlayer.grid[3][5] = 'H';
    newGameboardPlayer.grid[3][6] = 'H';
    newGameboardPlayer.grid[4][3] = 'H';
    newGameboardPlayer.grid[4][4] = 'H';
    newGameboardPlayer.grid[4][5] = 'H';
    const alignment = computerAI.getAlignment(newGameboardPlayer);
    expect(alignment).toMatchObject(['horizontal', [3, 3], [3, 6]]);
  
",martink-rsa/Battleships,https://github.com/martink-rsa/Battleships/blob/master/src/specs/computerAI.test.js,0
"and the client uses streams
should create a proper streams2 stream
","
        var stream = needle.get('localhost:' + port)

        // newer node versions set this to null instead of false
        var bool = !!stream._readableState.flowing;
        should.equal(false, bool);

        var readableCalled = false;
        stream.on('readable', function() {
          readableCalled = true;
        })

        stream.on('done', function() {
          readableCalled.should.be.true;
          done();
        });

        stream.resume()

      
",OdongoWaga/Vidly-API,https://github.com/OdongoWaga/Vidly-API/blob/master/node_modules/bcrypt/node_modules/needle/test/response_stream_spec.js,0
"Polygon Within
should return false if a part of a multilinestring is not within a polygon
","
      polygon = new Terraformer.Polygon([ [ [ 5, 5 ], [ 5, 15 ], [ 15, 15 ], [ 15, 5 ], [ 5, 5 ] ] ]);
    

      var mls = new Terraformer.MultiLineString([ [ [ 6, 6 ], [ 6, 14 ] ], [ [ 1, 1 ], [ 1, 2 ] ] ]);
      expect(mls.within(polygon)).toEqual(false);
    
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/terraformer/spec/terraformerSpec.js,1
"Testing Unit
3^2-2^2=5
","
    assert.equal(a.lex(""3^2-2^2"").toPostfix().postfixEval(),5);
  
",JamieDixon/jest-tester,https://github.com/JamieDixon/jest-tester/blob/master/webapp/node_modules/math-expression-evaluator/test/index.js,-
"de-indent
0 indent
","
    var str = '\nabc\n  bcd\n  cde\nefg'
    var res = deindent(str)
    assert.equal(str, res)
  
",szymonlankauf/Vue-jest,https://github.com/szymonlankauf/Vue-jest/blob/master/node_modules/de-indent/test.js,0
"options
should have filename option
","
        assert(ws.options.filename === 'logo.png');
      
",tupizz/playground-integrated-tests,https://github.com/tupizz/playground-integrated-tests/blob/master/node_modules/gridfs-stream/test/index.js,0
"#timeout
should emit timeout event and execute the next task when a task timeout by default
","
			var queue = SeqQueue.createQueue();
			var executedTaskCount = 0;
			var timeoutCount = 0;
			var onTimeoutCount = 0;
			//add timeout listener
			queue.on('timeout', function(task) {
				task.should.be.a('object');
				task.fn.should.be.a('function');
				timeoutCount++;
			});
			
			queue.push(function(task) {
				executedTaskCount++;
				//no task.done() invoke to cause a timeout
			}, function() {
				onTimeoutCount++;
			}).should.be.true;
			
			queue.push(function(task) {
				executedTaskCount++;
				task.done();
			}).should.be.true;
			
			setTimeout(function() {
				//wait all task finish
				executedTaskCount.should.be.equal(2);
				timeoutCount.should.be.equal(1);
				onTimeoutCount.should.be.equal(1);
				done();
			}, 4000);	//default timeout is 3s
		
",LaneriTiago/nodejs-tdd-jest,https://github.com/LaneriTiago/nodejs-tdd-jest/blob/master/node_modules/seq-queue/test/seq-queue-test.js,1
"getExtractor(url)
returns a custom extractor based on detectors
","
    const html = '<head><meta name=""al:ios:app_name"" value=""Medium"" /></head>';

    const $ = cheerio.load(html);
    const extractor = getExtractor('http://foo.com', null, $);

    assert.equal(extractor.domain, 'medium.com');
  
",postlight/mercury-parser,https://github.com/postlight/mercury-parser/blob/master/src/extractors/get-extractor.test.js,-
"deleteList functionality
deleteList works
","
        const result = await List.deleteList(email, listId1);

        expect(result).toEqual({list_id: listId1});
    
",pritishakumar/gardenist,https://github.com/pritishakumar/gardenist/blob/master/backend/models/list.test.js,0
"The ""odd"" property
Should adopt ""false"" as value
","
      const renderedComponent = shallow(<Link to=""/"" odd=""false"" />); // eslint-disable-line
      expect(toJson(renderedComponent)).toMatchSnapshot();
    
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/components/Link/tests/index.test.js,-
"runAllTimers
runs callbacks with arguments after the interval
","
      const global = {process};
      const timers = new FakeTimers(global, moduleMocker);
      timers.useFakeTimers();

      const fn = jest.genMockFn();
      global.setTimeout(fn, 0, 'mockArg1', 'mockArg2');

      timers.runAllTimers();
      expect(fn.mock.calls).toEqual([['mockArg1', 'mockArg2']]);
    
",git-palace/jest,https://github.com/git-palace/jest/blob/master/packages/jest-util/src/__tests__/FakeTimers-test.js,-
"getNeighborsStack should search the neighboring nodes and return a stack
Searches the top, right, bottom and left node and returns them in reverse order
","
    const node = grid[1][1];
    const neighbors = getNeighborsStack(node, grid);

    const left = neighbors[0];
    const down = neighbors[1];
    const right = neighbors[2];
    const up = neighbors[3];

    expect(up).toBe(grid[0][1]);
    expect(right).toBe(grid[1][2]);
    expect(down).toBe(grid[2][1]);
    expect(left).toBe(grid[1][0]);
  
",JoshLampen/pathfinder,https://github.com/JoshLampen/pathfinder/blob/master/src/tests/algorithmHelpers/algorithmHelpers.test.js,1
"GetSectionTitle
should return a singular string for the product
","
        props.initialData = { user: props.initialData.user };
        props.modifiedData = { user: props.initialData.user };
        props.models = [props.models[1]];

        const { getSectionTitle } = shallow(<ModelPage {...props} />).instance();

        expect(getSectionTitle()).toContain('singular');
      
",ticket721/server,https://github.com/ticket721/server/blob/master/plugins/content-type-builder/admin/src/containers/ModelPage/tests/index.test.js,-
"$push
only pushes unto an array
","
      expect(update.bind(null, 1, {$push: 7})).toThrow(
        'update(): expected target of $push to be an array; got 1.'
      );
    
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/immutability-helper/test.js,1
"initial test case
returns the author
","
      url =
        'http://www.thepoliticalinsider.com/hillary-faithless-electors-more-than-trump/';
      const html = fs.readFileSync(
        './fixtures/www.thepoliticalinsider.com/1482255981213.html'
      );
      result = Mercury.parse(url, { html, fallback: false });
    

      // To pass this test, fill out the author selector
      // in ./src/extractors/custom/www.thepoliticalinsider.com/index.js.
      const { author } = await result;

      // Update these values with the expected values from
      // the article.
      assert.equal(author, 'Editor');
    
",postlight/mercury-parser,https://github.com/postlight/mercury-parser/blob/master/src/extractors/custom/www.thepoliticalinsider.com/index.test.js,-
"Hawk
generates a header then successfully parse it (no server header options)
","

        var req = {
            method: 'POST',
            url: '/resource/4?filter=a',
            headers: {
                host: 'example.com:8080',
                'content-type': 'text/plain;x=y'
            }
        };

        var payload = 'some not so random text';

        credentialsFunc('123456', function (err, credentials1) {

            var reqHeader = Hawk.client.header('http://example.com:8080/resource/4?filter=a', req.method, { credentials: credentials1, ext: 'some-app-data', payload: payload, contentType: req.headers['content-type'] });
            req.headers.authorization = reqHeader.field;

            Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials2, artifacts) {

                expect(err).to.not.exist();
                expect(credentials2.user).to.equal('steve');
                expect(artifacts.ext).to.equal('some-app-data');
                expect(Hawk.server.authenticatePayload(payload, credentials2, artifacts, req.headers['content-type'])).to.equal(true);

                var res = {
                    headers: {
                        'content-type': 'text/plain'
                    }
                };

                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
                expect(res.headers['server-authorization']).to.exist();

                expect(Hawk.client.authenticate(res, credentials2, artifacts)).to.equal(true);
                done();
            });
        });
    
",JamieDixon/jest-tester,https://github.com/JamieDixon/jest-tester/blob/master/webapp/node_modules/hawk/test/index.js,0
"YoutubeAPIUtils
calls the callback when $.ajax requests are finished
","
    var $ = require('jquery');
    var YoutubeAPIUtils = require('../YoutubeAPIUtils');

    // Create a mock function for our callback
    var callback = jest.genMockFunction();
    YoutubeAPIUtils.search('ha noi',callback);
  
",cuongcua90/youtube-react-reflux,https://github.com/cuongcua90/youtube-react-reflux/blob/master/src/js/utils/__tests__/YoutubeAPIUtils-test.js,-
"`guessWord` action creator
input box clears on submit
","
    // create a mock function for `getSecretWord`
    guessWordMock = jest.fn();

    // set up Input, with guessWordMock as a prop
    wrapper = shallow(<UnconnectedInput guessWord={guessWordMock} />);

    // simulate the input
    wrapper.instance().inputBox.current = { value: guessedWord };

    // simulate click on submit button
    const submit = findByTestAttr(wrapper, ""submit-button"");
    submit.simulate(""click"", { preventDefault() {} });
  

    expect(wrapper.instance().inputBox.current.value).toBe("""");
  
",alexsjcho/jotto-react-jest-enyzme-testing,https://github.com/alexsjcho/jotto-react-jest-enyzme-testing/blob/master/src/Input.test.js,1
"escapeHtml()
encodes {} characters
","

        var encoded = Hoek.escapeHtml('{}');
        expect(encoded).to.equal('&#x7b;&#x7d;');
        done();
    
",dineshselvantdm/twitter-web-app,https://github.com/dineshselvantdm/twitter-web-app/blob/master/node_modules/hoek/test/escaper.js,-
".iaddn()
should allow a sign change
","
      var a = new BN(-100);
      assert.equal(a.negative, 1);

      a.iaddn(200);

      assert.equal(a.negative, 0);
      assert.equal(a.toString(), '100');
    
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/bn.js/test/arithmetic-test.js,0
"required
fails on null or undefined
","
      assertFails(validator, /*#__PURE__*/_react[""default""].createElement(""div"", {
        someRef: undefined
      }), 'someRef');
      assertFails(validator, /*#__PURE__*/_react[""default""].createElement(""div"", {
        someRef: null
      }), 'someRef');
    
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/airbnb-prop-types/build-test/ref.js,-
"Server User on Initial Page Load
it does not create a new server user with an existing user
","
      localStorage.setItem('luid', mockUid);

      cy.checkPlayerCount();
    
",TimMansell/vue-solitaire,https://github.com/TimMansell/vue-solitaire/blob/master/tests/e2e/specs/user.spec.js,0
"authenticate()
returns false on invalid header
","

            var res = {
                headers: {
                    'server-authorization': 'Hawk mac=""abc"", bad=""xyz""'
                }
            };

            expect(Hawk.client.authenticate(res, {})).to.equal(false);
            done();
        
",tmtarpinian/jest_introduction,https://github.com/tmtarpinian/jest_introduction/blob/master/node_modules/hawk/test/client.js,1
"Testing Unit
check for constant inside Sigma
","
    assert.equal(a.lex(""Sigma1,3,2"",[{type:3,preced:0,ev:""x"",show:""x"",token:""x""}]).toPostfix().postfixEval({x:2}),6);
  
",dineshselvantdm/twitter-web-app,https://github.com/dineshselvantdm/twitter-web-app/blob/master/node_modules/math-expression-evaluator/test/index.js,0
"TodoController.deleteTodo
should handle 404
","
    TodoModel.findByIdAndDelete.mockReturnValue(null);
    await TodoController.deleteTodo(req, res, next);
    expect(res.statusCode).toBe(404);
    expect(res._isEndCalled()).toBeTruthy();

  
",nickprihodko/jest-node-express,https://github.com/nickprihodko/jest-node-express/blob/master/test/unit/todo.controller.test.js,0
"if request contains cookie header
must be a valid cookie string
","
      var COOKIE_PAIR = /^([^=\s]+)\s*=\s*(""?)\s*(.*)\s*\2\s*$/;

      var full_header = [
        WEIRD_COOKIE_NAME     + '=' + WEIRD_COOKIE_VALUE,
        BASE64_COOKIE_NAME    + '=' + BASE64_COOKIE_VALUE,
        FORBIDDEN_COOKIE_NAME + '=' + encode(FORBIDDEN_COOKIE_VALUE),
        NUMBER_COOKIE_NAME    + '=' + NUMBER_COOKIE_VALUE
      ].join('; ')

      needle.get('localhost:' + ALL_COOKIES_TEST_PORT, opts, function(error, response) {
        var cookieString = response.req._headers.cookie;
        cookieString.should.be.type('string');

        cookieString.split(/\s*;\s*/).forEach(function(pair) {
          COOKIE_PAIR.test(pair).should.be.exactly(true);
        });

        cookieString.should.be.exactly(full_header);
        done();
      });
    
",LaneriTiago/nodejs-tdd-jest,https://github.com/LaneriTiago/nodejs-tdd-jest/blob/master/node_modules/needle/test/cookies_spec.js,1
"MultiPolygon Within
should return true if a multipoint is within a multipolygon
","
      multipolygon = new Terraformer.MultiPolygon([ [ [ [ 5, 5 ], [ 5, 15 ], [ 15, 15 ], [ 15, 5 ], [ 5, 5 ] ] ], [ [ [ 25, 25 ], [ 25, 35 ], [ 35, 35 ], [ 35, 25 ], [ 25, 25 ] ] ] ]);
    

      var linestring = new Terraformer.MultiPoint([ [ 6, 6 ], [ 6, 14 ] ]);
      expect(linestring.within(multipolygon)).toEqual(true);
    
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/terraformer/spec/terraformerSpec.js,1
"Checking Names
User fetch name should be Leanne Graham
","ameCheck(

    expect.assertions(1);
    const data = await functions.fetchUser();
    expect(data.name).toEqual('Leanne Graham');

",Khaingmon13/Jest,https://github.com/Khaingmon13/Jest/blob/master/function.test.js,1
"authenticate()
returns false on invalid mac
","

            var res = {
                headers: {
                    'content-type': 'text/plain',
                    'server-authorization': 'Hawk mac=""_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE="", hash=""f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM="", ext=""response-specific""'
                }
            };

            var artifacts = {
                method: 'POST',
                host: 'example.com',
                port: '8080',
                resource: '/resource/4?filter=a',
                ts: '1362336900',
                nonce: 'eb5S_L',
                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',
                ext: 'some-app-data',
                app: undefined,
                dlg: undefined,
                mac: 'BlmSe8K+pbKIb6YsZCnt4E1GrYvY1AaYayNR82dGpIk=',
                id: '123456'
            };

            var credentials = {
                id: '123456',
                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                algorithm: 'sha256',
                user: 'steve'
            };

            expect(Hawk.client.authenticate(res, credentials, artifacts)).to.equal(false);
            done();
        
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/hawk/test/client.js,1
"subnet() method with mask length 32
should compute ipv4 subnet number of addressable hosts
","
      assert.equal(ipv4Subnet.numHosts, 1);
    
",MaxKoldun/Task-10-Tetsing,https://github.com/MaxKoldun/Task-10-Tetsing/blob/master/node_modules/ip/test/api-test.js,-
"Timeouts
Timeout is set to 2500 milliseconds
","
    await MoviesDAO.injectDB(global.mflixClient)
  

    const { wtimeout } = await MoviesDAO.getConfiguration()
    expect(wtimeout).toBe(2500)
  
",sourabh-repo/mflix-node-app,https://github.com/sourabh-repo/mflix-node-app/blob/master/test/timeouts.test.js,1
"Game State
refreshing page on game lost shows game lost state
","
    localStorage.setItem('luid', mockUid);

    cy.visit('/');
  

    cy.setBoard(noMovesKingColumn).then(() => {
      cy.get('[data-test=""card-K♣""]').clickTo('[data-test=""column-1""]');
      cy.get('[data-test=""card-Q♣""]').clickTo('[data-test=""card-K♣""]');

      cy.get('[data-test=""game-lost""]').should('be.visible');

      cy.reload();

      cy.get('[data-test=""game-lost""]').should('be.visible');
    });
  
",TimMansell/vue-solitaire,https://github.com/TimMansell/vue-solitaire/blob/master/tests/e2e/specs/gameState.spec.js,1
"header()
generates header (pre calculated hash)
","

            var credentials = {
                id: '123456',
                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                algorithm: 'sha256',
                user: 'steve'
            };

            var artifacts = {
                method: 'POST',
                host: 'example.com',
                port: '8080',
                resource: '/resource/4?filter=a',
                ts: '1398546787',
                nonce: 'xUwusx',
                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',
                ext: 'some-app-data',
                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',
                id: '123456'
            };

            var options = { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' };
            options.hash = Hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);
            var header = Hawk.server.header(credentials, artifacts, options);
            expect(header).to.equal('Hawk mac=\""n14wVJK4cOxAytPUMc5bPezQzuJGl5n7MYXhFQgEKsE=\"", hash=\""f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=\"", ext=\""response-specific\""');
            done();
        
",Sstobo/Jest-Testing,https://github.com/Sstobo/Jest-Testing/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,-
"using clicks
should move last cards foundation and then show win screen
","
      cy.setBoard(foundations).then(() => {
        cy.get('[data-test=""game-won""]').should('not.exist');

        cy.get('[data-test=""column-0""]').shouldContain(['K♠', 'Q♠']);

        cy.get('[data-test=""card-Q♠""]').clickTo('[data-test=""foundation-3""]');
        cy.get('[data-test=""card-K♠""]').clickTo('[data-test=""foundation-3""]');

        cy.get('[data-test=""game-won""]').should('be.visible');

        cy.checkGameSummaryValues({ moves: 2 });
      });

      cy.get('[data-test=""game-overlay-btns""]').click();

      cy.get('[data-test=""game-won""]').should('not.exist');

      cy.get('[data-test=""foundation-3""]').shouldNotContain(['K♠', 'Q♠']);
    
",TimMansell/vue-solitaire,https://github.com/TimMansell/vue-solitaire/blob/master/tests/e2e/specs/foundations.spec.js,-
"Project
should adopt the ""isOdd"" property
","
    const wrapper = shallow(
      <Project
        thumbnail={thumbnail}
        title={title}
        detailsBodyText={description}
        isOdd={false}
      />,
    );
    expect(toJson(wrapper)).toMatchSnapshot();
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/components/Project/tests/index.test.js,-
"badRequest()
sets the message with the passed in message
","

        expect(Boom.badRequest('my message').message).to.equal('my message');
        done();
    
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/fsevents/node_modules/boom/test/index.js,1
"Testing Unit
test to check auto correct of parenthesis mismatch if opening>closing
","
    assert.equal(a.lex(""(2+(3-4"").toPostfix().postfixEval(),""1"");
  
",sethcarrino/redux-jest-testing,https://github.com/sethcarrino/redux-jest-testing/blob/master/node_modules/math-expression-evaluator/test/index.js,1
"with focus on one menu item
should act when the ARROW-UP key is pressed
","
        renderedComponent.setProps({ isExpanded: true });
        jest.clearAllMocks();
      

        const foundMenu = renderedComponent.find(Menu);
        const currentTarget = foundMenu.html();
        const keyCode = 38;
        foundMenu.simulate('keyDown', {
          currentTarget,
          preventDefault: PREVENT_DEFAULT,
          keyCode,
        });
        expect(handleExpandedState).toHaveBeenCalledTimes(1);
        expect(moveFocus).toHaveBeenCalledTimes(1);
      

        renderedComponent.setProps({ isExpanded: false });
      
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/components/LanguageMenu/tests/index.test.js,-
"with stream arguments
should pass them to the underlying stream
","
      stream.theStream.mode.should.eql(parseInt('0666', 8));
      done();
    
",Moverr/jesttest,https://github.com/Moverr/jesttest/blob/master/node_modules/streamroller/test/DateRollingFileStream-test.js,-
"getContent Saga
should dispatch the contentLoaded action if it requests the data successfully
","
    getContentGenerator = getContent();

    const selectDescriptor = getContentGenerator.next().value;
    expect(selectDescriptor).toMatchSnapshot();

    const callDescriptor = getContentGenerator.next(locale).value;
    expect(callDescriptor).toMatchSnapshot();
  

    const response = {
      items: [
        {
          fields: {
            content: 'Some content',
          },
        },
      ],
    };

    const parsedResponse = marked('Some content');

    const putDescriptor = getContentGenerator.next(response).value;
    expect(putDescriptor).toEqual(put(contentLoaded(parsedResponse, locale)));
  
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/containers/AboutPage/tests/saga.test.js,1
"constructed with no options
handles resets
","
            const text = '\x1b[1mthis is bold\x1b[0m, but this isn\'t';
            const result = '<b>this is bold</b>, but this isn\'t';

            return test(text, result, done);
        
",SidiOuld/Testing-With-Jest,https://github.com/SidiOuld/Testing-With-Jest/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,-
"testPathsMatching
finds tests with totally custom foobar file extensions
","
      findMatchingTests = config =>
        Runtime.createContext(config, {
          maxWorkers,
        }).then(hasteMap =>
          new SearchSource(hasteMap, config).findMatchingTests());
    

      const {config} = normalizeConfig({
        moduleFileExtensions: ['foobar'],
        name,
        rootDir,
        testMatch,
      });
      return findMatchingTests(config).then(data => {
        const relPaths = data.paths.map(absPath =>
          path.relative(rootDir, absPath));
        expect(relPaths).toEqual([path.normalize('__testtests__/test.foobar')]);
      });
    
",git-palace/jest,https://github.com/git-palace/jest/blob/master/packages/jest-cli/src/__tests__/SearchSource-test.js,1
"addList functionality
addList works
","
        const result = await List.addList(email, listName);

        expect(result).toEqual({
            list_id: expect.any(Number),
            list_name: listName
        });
    
",pritishakumar/gardenist,https://github.com/pritishakumar/gardenist/blob/master/backend/models/list.test.js,0
"util/core/valueToString
returns 'undefined' for literal undefined
","
        assert.equals(valueToString(undefined), ""undefined"");
    
",luzalba/Jest,https://github.com/luzalba/Jest/blob/master/node_modules/@sinonjs/commons/lib/value-to-string.test.js,1
"Testing out emmited events
recursively walk the dir and return the matching list
","
    fileset('**/*.js', 'node_modules/**')
      .on('error', done)
      .on('end', function(results) {
        assert.ok(Array.isArray(results), 'should be an array');
        assert.equal(results.length, 2);
        done();
      });
  
",LucasKeiti28/tdd-jest,https://github.com/LucasKeiti28/tdd-jest/blob/master/backend/node_modules/fileset/test/mocha.js,-
"showInvisibles
shows invisibles
","
    assert.strictEqual(showInvisibles('1 2\n3\t4\r5'), '1·2⏎3↹4␍5');
  
",EduardaDalmas/Jest,https://github.com/EduardaDalmas/Jest/blob/master/node_modules/prettier-linter-helpers/test/index.test.js,0
"sqlForPartialUpdate functionality
sqlForPartialUpdate works
","
        const table = ""users""
        const items = {
            email: ""test@test.com"",
            name: ""Test User""
        };
        const searchKey = {
            key: ""email"",
            value: ""test@test.com""
        }
        const keyArray = [""email"", ""name"", ""password""]
        const returnVal = ""email, name""

        const result = sqlForPartialUpdate(table, items, searchKey, keyArray, returnVal)
        
        expect(result).toEqual({
            query: ""UPDATE users SET email=$1, name=$2 WHERE email=$3 RETURNING email, name"", 
            values: [""test@test.com"", ""Test User"", ""test@test.com""]
        });
    
",pritishakumar/gardenist,https://github.com/pritishakumar/gardenist/blob/master/backend/helpers/partialUpdate.test.js,0
"coveragePathIgnorePatterns
does not normalize trailing slashes
","
    // This is a list of patterns, so we can't assume any of them are
    // directories
    const {config} = normalize({
      coveragePathIgnorePatterns: ['bar/baz', 'qux/quux/'],
      rootDir: '/root/path/foo',
    });

    expect(config.coveragePathIgnorePatterns).toEqual([
      joinForPattern('bar', 'baz'),
      joinForPattern('qux', 'quux', ''),
    ]);
  
",git-palace/jest,https://github.com/git-palace/jest/blob/master/packages/jest-config/src/__tests__/normalize-test.js,1
"when username is a valid string, but no username is passed
Basic Auth only includes username, without colon
","
      needle.get('localhost:' + port, opts, function(err, resp) {
        var sent_headers = resp.body.headers;
        var auth = get_auth(sent_headers['authorization']);
        auth[0].should.equal('foobar');
        auth.should.have.lengthOf(1);
        done();
      })
    
",gtwright/with-jest,https://github.com/gtwright/with-jest/blob/master/node_modules/needle/test/basic_auth_spec.js,0
"Hawk
generates a header then successfully parse it (with hash)
","

        var req = {
            method: 'GET',
            url: '/resource/4?filter=a',
            host: 'example.com',
            port: 8080
        };

        credentialsFunc('123456', function (err, credentials1) {

            req.authorization = Hawk.client.header('http://example.com:8080/resource/4?filter=a', req.method, { credentials: credentials1, payload: 'hola!', ext: 'some-app-data' }).field;
            Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials2, artifacts) {

                expect(err).to.not.exist();
                expect(credentials2.user).to.equal('steve');
                expect(artifacts.ext).to.equal('some-app-data');
                done();
            });
        });
    
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/fsevents/node_modules/hawk/test/index.js,-
"Polygon Within
should return true if all of the points in a multipoint are in the same polygon
","
      polygon = new Terraformer.Polygon([ [ [ 5, 5 ], [ 5, 15 ], [ 15, 15 ], [ 15, 5 ], [ 5, 5 ] ] ]);
    

      var ls = new Terraformer.MultiPoint([ [ 6, 6 ], [ 6, 14 ], [ 14, 14 ] ]);
      expect(ls.within(polygon)).toEqual(true);
    
",sharontheginger/LearnAcademy_jesttesting,https://github.com/sharontheginger/LearnAcademy_jesttesting/blob/master/node_modules/terraformer/spec/terraformerSpec.js,-
"authenticate()
errors on an missing host header
","

            var req = {
                method: 'GET',
                url: '/resource/4?filter=a',
                headers: {
                    authorization: 'Hawk id=""123"", ts=""1353788437"", nonce=""k3j4h2"", mac=""/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos="", ext=""hello""'
                }
            };

            Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now() }, function (err, credentials, artifacts) {

                expect(err).to.exist();
                expect(err.output.payload.message).to.equal('Invalid Host header');
                done();
            });
        
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,0
"dnsPrefetchControl
continues onto the following middleware
","
    var app = use()

    request(app).get('/')
    .expect('Hello world!')
    .end(done)
  
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/node_modules/dns-prefetch-control/test/index.js,0
"Hawk
generates a header then fails to parse it (missing server header hash)
","

        var req = {
            method: 'POST',
            url: '/resource/4?filter=a',
            headers: {
                host: 'example.com:8080',
                'content-type': 'text/plain;x=y'
            }
        };

        var payload = 'some not so random text';

        credentialsFunc('123456', function (err, credentials1) {

            var reqHeader = Hawk.client.header('http://example.com:8080/resource/4?filter=a', req.method, { credentials: credentials1, ext: 'some-app-data', payload: payload, contentType: req.headers['content-type'] });
            req.headers.authorization = reqHeader.field;

            Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials2, artifacts) {

                expect(err).to.not.exist();
                expect(credentials2.user).to.equal('steve');
                expect(artifacts.ext).to.equal('some-app-data');
                expect(Hawk.server.authenticatePayload(payload, credentials2, artifacts, req.headers['content-type'])).to.equal(true);

                var res = {
                    headers: {
                        'content-type': 'text/plain'
                    }
                };

                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
                expect(res.headers['server-authorization']).to.exist();

                expect(Hawk.client.authenticate(res, credentials2, artifacts, { payload: 'some reply' })).to.equal(false);
                done();
            });
        });
    
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/fsevents/node_modules/hawk/test/index.js,-
"and client requests gzip compression
should have the body decompressed
","
        needle.get('localhost:' + port, {headers: {'Accept-Encoding': 'gzip'}}, function(err, response, body){
          should.ifError(err);
          body.should.have.property('foo', 'bar');
          response.bytes.should.not.equal(jsonData.length);
          done();
        })
      
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/node_modules/needle/test/compression_spec.js,1
"Faces test suite
should render faces
","
    const wrapper = getFaces(initialProps);
    expect(wrapper.exists()).toBeTruthy();

    expect(wrapper.find(Face).exists()).toBeTruthy();
    expect(wrapper.find(Paragraph).exists()).toBeTruthy();
  

    initialProps.onFaceClick.mockClear();
  
",gasserandreas/rekognition,https://github.com/gasserandreas/rekognition/blob/master/src/images/detail/__tests__/Faces.test.js,0
"authenticateMessage()
should fail authorization on mismatching host
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                expect(auth).to.exist();

                Hawk.server.authenticateMessage('example1.com', 8080, 'some message', auth, credentialsFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Bad mac');
                    done();
                });
            });
        
",nialloc9/reactReduxJestBoilerplate,https://github.com/nialloc9/reactReduxJestBoilerplate/blob/master/node_modules/hawk/test/uri.js,-
"<Hero />
Render component hero
","
        expect(hero.length).toEqual(1);
    
",nkrowicki/woloxChallenge,https://github.com/nkrowicki/woloxChallenge/blob/master/src/__test__/components/Hero.test.js,0
"gensync(function* () {})
error inside body
","
    const fn = gensync(function*() {
      yield* doError();
    });

    await expectResult(fn, undefined, {
      error: DID_ERROR,
      expectSync: true,
      syncErrback: false,
    });
  
",sarfojoe/teasting_with_jest,https://github.com/sarfojoe/teasting_with_jest/blob/master/diceproject/node_modules/gensync/test/index.test.js,0
"languagePicker
input component does not show when success is true
","  const wrapper = setup({ secretWord: 'party', success: true });
  expect(wrapper.isEmptyRender()).toBe(true);
}
",lmackenzie94/react-testing-udemy,https://github.com/lmackenzie94/react-testing-udemy/blob/master/jotto/src/Input.test.js,1
"passing connection: keep-alive
sends a Connection: keep-alive header (using options.connection)
","
        send_request({ connection: 'keep-alive' }, function(err, resp) {
          resp.body.headers['connection'].should.eql('keep-alive');
          done();
        })
      
",crudaz/mongodb-testing,https://github.com/crudaz/mongodb-testing/blob/master/node_modules/needle/test/headers_spec.js,1
"::
should respond with true
","
        assert.ok(ip.isLoopback('::'))
      
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/ip/test/api-test.js,0
"Text and Subfield Search
Can perform a text search
","
    await MoviesDAO.injectDB(global.mflixClient)
  

    const filters = { text: ""mongo"" }
    const { moviesList, totalNumMovies } = await MoviesDAO.getMovies({
      filters,
    })
    expect(moviesList.length).toEqual(6)
    expect(totalNumMovies).toEqual(6)
    const firstMovie = moviesList[0]
    expect(firstMovie[""title""]).toEqual(""Flash Gordon"")
  
",sourabh-repo/mflix-node-app,https://github.com/sourabh-repo/mflix-node-app/blob/master/test/text-subfield.test.js,-
"-------------------------------GET ROUTE-------------------------------
[ GET/:id 404 ]  should return 404 if student is not found
","
    const response = await request(server).get('/api/students/10000');
    expect(response.status).toBe(404);
  
",john2796/Server-Testing-jb,https://github.com/john2796/Server-Testing-jb/blob/master/students/student.test.js,1
"The DistrictOfficeContact Display
should be a div
","
      expect(contact.type()).toBe('div');
    
",ewojtach/HackNodeServer,https://github.com/ewojtach/HackNodeServer/blob/master/__tests__/DistrictOfficeContact-test.js,1
"authenticateMessage()
errors on invalid authorization (nonce)
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                delete auth.nonce;

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Invalid authorization');
                    done();
                });
            });
        
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/fsevents/node_modules/hawk/test/server.js,-
"Testing Unit
-3^2=-9
","
    assert.equal(a.lex(""-3^2"").toPostfix().postfixEval(),-9);
  
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/math-expression-evaluator/test/index.js,-
"when user sets reqBodyEncoding
should set the accepts-charset header
","
      var app = express();
      app.use(proxy('httpbin.org', {
        reqBodyEncoding: 'utf-16'
      }));
      request(app)
        .get('/headers')
        .end(function(err, res) {
          if (err) { throw err; }
          assert.equal(res.body.headers['Accept-Charset'], 'utf-16');
          done(err);
        });
    
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/express-http-proxy/test/bodyEncoding.js,1
"Testing Unit
checks ^ operator
","
    assert.equal(a.lex(""2^2"").toPostfix().postfixEval(),4);
  
",MaxKoldun/Task-10-Tetsing,https://github.com/MaxKoldun/Task-10-Tetsing/blob/master/node_modules/math-expression-evaluator/test/index.js,0
"header()
generates header (empty payload)
","

            var credentials = {
                id: '123456',
                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                algorithm: 'sha256',
                user: 'steve'
            };

            var artifacts = {
                method: 'POST',
                host: 'example.com',
                port: '8080',
                resource: '/resource/4?filter=a',
                ts: '1398546787',
                nonce: 'xUwusx',
                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',
                ext: 'some-app-data',
                mac: 'dvIvMThwi28J61Jc3P0ryAhuKpanU63GXdx6hkmQkJA=',
                id: '123456'
            };

            var header = Hawk.server.header(credentials, artifacts, { payload: '', contentType: 'text/plain', ext: 'response-specific' });
            expect(header).to.equal('Hawk mac=\""i8/kUBDx0QF+PpCtW860kkV/fa9dbwEoe/FpGUXowf0=\"", hash=\""q/t+NNAkQZNlq/aAD6PlexImwQTxwgT2MahfTa9XRLA=\"", ext=\""response-specific\""');
            done();
        
",dineshselvantdm/twitter-web-app,https://github.com/dineshselvantdm/twitter-web-app/blob/master/node_modules/hawk/test/server.js,1
"getNeighborsQueue should search the neighboring nodes
Returns an array with the right neighboring node coordinates in the order of bottom, right, up and left
","
    const node = grid[1][1];
    const neighbors = getNeighborsQueue(node, grid);

    const up = neighbors[0];
    const right = neighbors[1];
    const down = neighbors[2];
    const left = neighbors[3];

    expect(up).toBe(grid[0][1]);
    expect(right).toBe(grid[1][2]);
    expect(down).toBe(grid[2][1]);
    expect(left).toBe(grid[1][0]);
  
",JoshLampen/pathfinder,https://github.com/JoshLampen/pathfinder/blob/master/src/tests/algorithmHelpers/algorithmHelpers.test.js,1
"Hawk
generates a header then successfully parse it (node request)
","

        var req = {
            method: 'POST',
            url: '/resource/4?filter=a',
            headers: {
                host: 'example.com:8080',
                'content-type': 'text/plain;x=y'
            }
        };

        var payload = 'some not so random text';

        credentialsFunc('123456', function (err, credentials1) {

            var reqHeader = Hawk.client.header('http://example.com:8080/resource/4?filter=a', req.method, { credentials: credentials1, ext: 'some-app-data', payload: payload, contentType: req.headers['content-type'] });
            req.headers.authorization = reqHeader.field;

            Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials2, artifacts) {

                expect(err).to.not.exist();
                expect(credentials2.user).to.equal('steve');
                expect(artifacts.ext).to.equal('some-app-data');
                expect(Hawk.server.authenticatePayload(payload, credentials2, artifacts, req.headers['content-type'])).to.equal(true);

                var res = {
                    headers: {
                        'content-type': 'text/plain'
                    }
                };

                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
                expect(res.headers['server-authorization']).to.exist();

                expect(Hawk.client.authenticate(res, credentials2, artifacts, { payload: 'some reply' })).to.equal(true);
                done();
            });
        });
    
",golfapipol/jest-waterline-integration-test,https://github.com/golfapipol/jest-waterline-integration-test/blob/master/node_modules/hawk/test/index.js,-
"timers
should work before calling resetAllMocks
","
    jest.useFakeTimers();
    const f = jest.fn();
    setImmediate(() => f());
    jest.runAllImmediates();
    expect(f.mock.calls.length).toBe(1);
  
",git-palace/jest,https://github.com/git-palace/jest/blob/master/integration_tests/timer-resetMocks/after_resetAllMocks/timer_and_mock.test.js,-
"Person
should register events properly
","
    person.on('say', console.log)._events.say.should.equal(console.log);
  
",gtwright/with-jest,https://github.com/gtwright/with-jest/blob/master/node_modules/emitter-mixin/test/person.js,-
"with innerFunc uncontrolled
innerArgs.length < outerFunc.length <= innerFunc.length
","
      const innerFunc = (foo, bar, baz) => innerHandler(foo, bar, baz);
      const outerFunc = (foo, bar, baz) => outerHandler(foo, bar, baz);

      const embeddedFunc = createEmbeddedFunction(innerFunc, outerFunc);
      result = embeddedFunc(...args);
      expect(innerHandler).toHaveBeenCalledWith(...args, undefined);
      expect(outerHandler).toHaveBeenCalledWith(...args, undefined);
    

      expect(innerHandler).toHaveBeenCalledTimes(1);
      expect(outerHandler).toHaveBeenCalledTimes(1);
    
",Stupidism/stupid-rc-starter,https://github.com/Stupidism/stupid-rc-starter/blob/master/src/hocs/__tests__/embedHandler.test.js,-
"PropertyController
Property index
","
    const response = await request(app).get('/properties');

    expect(response.body).toHaveProperty('result.property.id');
  
",EduardaDalmas/Jest,https://github.com/EduardaDalmas/Jest/blob/master/__tests__/integration/Property.test.js,0
"DefaultBuildTab
should be able to update build error
","
      const { component, tabs } = setup();
      tabs.props().onChange({ currentTarget: { value: '' } }, 1);
      component.update();
      const defaultBuildTab = component.find(DefaultBuildTab);
      defaultBuildTab.props().updateBuildError('test error');
      expect(component.props().onTabsChange).toHaveBeenCalledWith({
        buildError: 'test error'
      });
      expect(component.props().onTabsChange).toHaveBeenCalledTimes(1);
    
",Sean2108/LATTE,https://github.com/Sean2108/LATTE/blob/master/test/components/BuildTabs.spec.js,1
"System
Should fire non-bubbling ""update"" event on update() calls
","
		const result = await global.page.evaluate(async () => await new Promise((resolve) => {
			Game.createSystem()
				.addEventListener('update', (e) => resolve(!e.bubbles))
				.update()
		}))
		expect(result).toBe(true)
	
",bcdewitt/js-game-engine,https://github.com/bcdewitt/js-game-engine/blob/master/test/tests/system.test.js,-
"sprintfjs
should return formated strings for complex placeholders
","
        // sign
        assert.equal(""2"", sprintf(""%d"", 2))
        assert.equal(""-2"", sprintf(""%d"", -2))
        assert.equal(""+2"", sprintf(""%+d"", 2))
        assert.equal(""-2"", sprintf(""%+d"", -2))
        assert.equal(""2"", sprintf(""%i"", 2))
        assert.equal(""-2"", sprintf(""%i"", -2))
        assert.equal(""+2"", sprintf(""%+i"", 2))
        assert.equal(""-2"", sprintf(""%+i"", -2))
        assert.equal(""2.2"", sprintf(""%f"", 2.2))
        assert.equal(""-2.2"", sprintf(""%f"", -2.2))
        assert.equal(""+2.2"", sprintf(""%+f"", 2.2))
        assert.equal(""-2.2"", sprintf(""%+f"", -2.2))
        assert.equal(""-2.3"", sprintf(""%+.1f"", -2.34))
        assert.equal(""-0.0"", sprintf(""%+.1f"", -0.01))
        assert.equal(""3.14159"", sprintf(""%.6g"", pi))
        assert.equal(""3.14"", sprintf(""%.3g"", pi))
        assert.equal(""3"", sprintf(""%.1g"", pi))
        assert.equal(""-000000123"", sprintf(""%+010d"", -123))
        assert.equal(""______-123"", sprintf(""%+'_10d"", -123))
        assert.equal(""-234.34 123.2"", sprintf(""%f %f"", -234.34, 123.2))

        // padding
        assert.equal(""-0002"", sprintf(""%05d"", -2))
        assert.equal(""-0002"", sprintf(""%05i"", -2))
        assert.equal(""    <"", sprintf(""%5s"", ""<""))
        assert.equal(""0000<"", sprintf(""%05s"", ""<""))
        assert.equal(""____<"", sprintf(""%'_5s"", ""<""))
        assert.equal("">    "", sprintf(""%-5s"", "">""))
        assert.equal("">0000"", sprintf(""%0-5s"", "">""))
        assert.equal("">____"", sprintf(""%'_-5s"", "">""))
        assert.equal(""xxxxxx"", sprintf(""%5s"", ""xxxxxx""))
        assert.equal(""1234"", sprintf(""%02u"", 1234))
        assert.equal("" -10.235"", sprintf(""%8.3f"", -10.23456))
        assert.equal(""-12.34 xxx"", sprintf(""%f %s"", -12.34, ""xxx""))
        assert.equal('{\n  ""foo"": ""bar""\n}', sprintf(""%2j"", {foo: ""bar""}))
        assert.equal('[\n  ""foo"",\n  ""bar""\n]', sprintf(""%2j"", [""foo"", ""bar""]))

        // precision
        assert.equal(""2.3"", sprintf(""%.1f"", 2.345))
        assert.equal(""xxxxx"", sprintf(""%5.5s"", ""xxxxxx""))
        assert.equal(""    x"", sprintf(""%5.1s"", ""xxxxxx""))

    
",marioviana07/jest-another-RPG,https://github.com/marioviana07/jest-another-RPG/blob/master/node_modules/sprintf-js/test/test.js,-
"Testing Unit
 should check when 4C3
","
    assert.equal(a.lex(""4C3"").toPostfix().postfixEval(),4);
  
",Moverr/jestcodecov,https://github.com/Moverr/jestcodecov/blob/master/bluh/node_modules/math-expression-evaluator/test/index.js,0
"header()
errors on missing uri
","

            var header = Hawk.client.header('', 'POST');
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid argument type');
            done();
        
",swkane/redux-jest-todo,https://github.com/swkane/redux-jest-todo/blob/master/node_modules/fsevents/node_modules/hawk/test/client.js,-
"and parse response is false
should return valid object
","
        needle.get('localhost:' + port, { parse_response: false }, function(err, response, body){
          should.not.exist(err);
          body.toString().should.eql('<post><p>hello</p><p>world</p></post>')
          done();
        })
      
",OdongoWaga/Vidly-API,https://github.com/OdongoWaga/Vidly-API/blob/master/node_modules/bcrypt/node_modules/needle/test/parsing_spec.js,-
"SearchSaveButton component
clicking the save button for a new search displays a success alert
","
    // setup a DOM element as a render target
    container = document.createElement('div');
    document.body.appendChild(container);

    fetch.resetMocks();
  

    // Define user context mark authenticated as true, this would mock state of auth'd user
    const userContextValue = { authenticated: true };

    // Define search context
    const searchContextValue = {
      submittedLocation: 'london',
      submittedSearchTerms: ['node', 'react'],
    };

    // Render the Search Save Button with relevant surrounding context providers
    const doc = renderWithContext(userContextValue, searchContextValue);

    // Mock server response for a 200, meaning a record was successfully created
    fetch.mockResponseOnce(JSON.stringify({ msg: 'record created' }), {
      status: 200,
    });

    // Click the search button to trigger search
    await act(async () => {
      userEvent.click(screen.getByRole('button'));
    });

    // Get success alert classes
    const successAlertClasses = doc.container.getElementsByClassName(
      'MuiAlert-standardSuccess'
    );

    // Using length asset that one success alert is present, also check that the msg is rendered
    expect(successAlertClasses.length).toEqual(1);
    expect(await screen.findByText('record created')).toBeInTheDocument();
  

    // cleanup on exiting
    unmountComponentAtNode(container);
    container.remove();
    container = null;
  
",jb-0/skills-tracker,https://github.com/jb-0/skills-tracker/blob/master/client/src/components/search/SearchSaveButton.test.js,1
"authenticateMessage()
should fail authorization on invalid credentials algorithm
","

            credentialsFunc('123456', function (err, credentials1) {

                var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials1 });
                expect(auth).to.exist();

                var errFunc = function (id, callback) {

                    callback(null, { key: '123', algorithm: '456' });
                };

                Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, function (err, credentials2) {

                    expect(err).to.exist();
                    expect(err.message).to.equal('Unknown algorithm');
                    done();
                });
            });
        
",xrgonzalezx/TodoJestTestDaily,https://github.com/xrgonzalezx/TodoJestTestDaily/blob/master/node_modules/hawk/test/server.js,-
"explicitNull
fails on any other value
","
    assertFails((0, _.explicitNull)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      foo: false
    }), 'foo');
    assertFails((0, _.explicitNull)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      foo: NaN
    }), 'foo');
    assertFails((0, _.explicitNull)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      foo: []
    }), 'foo');
    assertFails((0, _.explicitNull)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      foo: {}
    }), 'foo');
    assertFails((0, _.explicitNull)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      foo: """"
    }), 'foo');
    assertFails((0, _.explicitNull)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      foo: ""foo""
    }), 'foo');
    assertFails((0, _.explicitNull)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      foo: function foo() {}
    }), 'foo');
    assertFails((0, _.explicitNull)(), /*#__PURE__*/_react[""default""].createElement(""div"", {
      foo: /a/g
    }), 'foo');
  
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/airbnb-prop-types/build-test/explicitNull.js,-
"smart-accordion.vue
has an input with a unique id
","
    let accordionId1 = mountSmartAccordion().vm.$el.querySelector('.smart-accordion--toggle').id;
    let accordionId2 = mountSmartAccordion().vm.$el.querySelector('.smart-accordion--toggle').id;

    expect(accordionId1).not.toEqual(accordionId2);
  
",stangerjm/smart-x,https://github.com/stangerjm/smart-x/blob/master/Vue-components/__tests__/smart-accordion.spec.js,1
"the ""position"" property
should accept ""top"" as value
","
      const renderedComponent = shallow(<BackLink position=""top"" />);
      expect(toJson(renderedComponent)).toMatchSnapshot();
    
",Mensae/portfolio-react-boilerplate,https://github.com/Mensae/portfolio-react-boilerplate/blob/master/app/components/ProjectDetails/tests/BackLink.test.js,-
"with stream option enabled
persists styles between more than two toHtml() invocations
","
            const text = ['\x1b[31mred', 'also red', 'and red'];
            const result = '<span style=""color:#A00"">red</span><span style=""color:#A00"">also red</span><span style=""color:#A00"">and red</span>';

            return test(text, result, done, {stream: true});
        
",SidiOuld/Testing-With-Jest,https://github.com/SidiOuld/Testing-With-Jest/blob/master/node_modules/ansi-to-html/test/ansi_to_html.js,-
"`guessWord` action creator call
gets called when submit button is pressed
","
        guessWordMock = jest.fn();
        const props = {
            guessWord: guessWordMock,
        };
        
        // pass props to the testing component
        wrapper = shallow(<UnconnectedInput {...props} />);

        // pass values to the inputBox
        wrapper.instance().inputBox.current = { value: guessedWord }

        // Simulate the click on the submit button
        const button = findByTestAttr(wrapper, 'submit-button');
        button.simulate('click', { preventDefault() {} });
    

        // Did our mock function get called?
        const guessWordCallCount = guessWordMock.mock.calls.length;
        expect(guessWordCallCount).toBe(1);
    
",deepbsd/jestclass,https://github.com/deepbsd/jestclass/blob/master/jotto/src/Input.test.js,-
"with json: undefined but content-type = application/json
doesnt change Content-Type header
","
            post({ foo: 'bar', test: '测试' }, opts, function(err, resp) {
              resp.body.headers['content-type'].should.equal('application/json');
              done();
            })
          
",homelissa/jest,https://github.com/homelissa/jest/blob/master/node_modules/fsevents/node_modules/needle/test/post_data_spec.js,1
"passing connection: close
sends a Connection: close header
","
        send_request({ connection: 'close' }, function(err, resp) {
          resp.body.headers['connection'].should.eql('close');
          done();
        })
      
",lhg1995/lesson,https://github.com/lhg1995/lesson/blob/master/node_modules/needle/test/headers_spec.js,1
"with json: undefined but content-type = application/json
leaves default Accept header
","
            post({ foo: 'bar', test: '测试' }, opts, function(err, resp) {
              resp.body.headers['accept'].should.equal('*/*');
              done();
            })
          
",graypegg/jest-at-xello-example,https://github.com/graypegg/jest-at-xello-example/blob/master/node_modules/fsevents/node_modules/needle/test/post_data_spec.js,1
"Visualize and reset
should reset the grid by clicking reset
","
      cy.contains('Reset Grid').click()
      cy.get('#node-7-10').should('have.css', 'background-color', `rgba(0, 0, 0, 0)`)
    
",JoshLampen/pathfinder,https://github.com/JoshLampen/pathfinder/blob/master/cypress/integration/loadMap.spec.js,-
"HAS_NUMERIC_VALUE attrs
passes when attribute exists without a `0` vaue
","
        expect(wrapper.find('tr')).to.have.attr('rowspan')
      
",xiaoxiaoqian1217/xxq-jest,https://github.com/xiaoxiaoqian1217/xxq-jest/blob/master/node_modules/chai-enzyme/test/attr.test.js,-
"getBewit()
errors on invalid algorithm
","

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'hmac-sha-0'
            };

            var bewit = Hawk.uri.getBewit('https://example.com/somewhere/over/the/rainbow', { credentials: credentials, ttlSec: 300, ext: 'xandyandz' });
            expect(bewit).to.equal('');
            done();
        
",jstone28/react-with-jest,https://github.com/jstone28/react-with-jest/blob/master/node_modules/hawk/test/uri.js,-
"CSSStyleDeclaration
setting 0 to a padding or margin works
","
    var style = new CSSStyleDeclaration();
    style.padding = 0;
    expect(style.cssText).toEqual('padding: 0px;');
    style.margin = '1em';
    style.marginTop = '0';
    expect(style.marginTop).toEqual('0px');
  
",huskarit99/travis-ci-unit-test-jest,https://github.com/huskarit99/travis-ci-unit-test-jest/blob/master/node_modules/cssstyle/lib/CSSStyleDeclaration.test.js,-
"Password reset form
should render the form
","
    renderedForm = render(<PasswordResetForm />)
  

    expect(renderedForm).toBeTruthy()
  
",miriamhaenle/capstone-project,https://github.com/miriamhaenle/capstone-project/blob/master/src/components/PasswordResetForm/PasswordResetForm.test.js,1
"proxies headers
passed as on request
","
    http = express();
    http.use(proxy('http://httpbin.org', {
      headers: {
        'X-Current-president': 'taft'
      }
    }));
  

    request(http)
      .get('/headers')
      .set('X-Powerererer', 'XTYORG')
      .expect(200)
      .end(function(err, res) {
        if (err) { return done(err); }
        assert(res.body.headers['X-Powerererer']);
        done();
      });
  
",Puritanic/React-Advanced-Concepts,https://github.com/Puritanic/React-Advanced-Concepts/blob/master/server-side-rendering/server/node_modules/express-http-proxy/test/headers.js,0
